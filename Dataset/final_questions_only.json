[
    {
        "0_1_fibonacci": {
            "solution": "On line 11, the for loop iterates `n` times. Consequently, the function returns the (n+1)th term of the Fibonacci sequence instead of the nth term, as the loop generates one additional term beyond the desired nth term.Replace `range(0, n)` with `range(1, n)` on line 11.Replace `range(0, n)` with `range(0, n - 1)` on line 11.Replace `range(0, n)` with `range(2, n + 1)` on line 11.",
            "least": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.  if n <= 0:\n3.    return \"OOPS\"\n4.  elif n == 1:\n5.    return 1\n6.  elif n == 2:\n7.    return 1\n8.  else:\n9.     a = 0\n10.    b = 1\n11.    for i in range(0, n):\n12.      temp = b\n13.      b = a + b\n14.      a = temp\n15.    return b\n</bug_code>\n<stu_desc>\nThe student is a beginner to an intermediate programmer who is familiar with basic programming concepts but may still struggle with some details, such as loop iteration.\n</stu_desc>\n<dialogue>\nTeacher: Good, let's examine the loop together. How can we monitor the values of `a`, `b`, and `i` during the loop?\n</dialogue>",
            "more": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.  if n <= 0:\n3.    return \"OOPS\"\n4.  elif n == 1:\n5.    return 1\n6.  elif n == 2:\n7.    return 1\n8.  else:\n9.     a = 0\n10.    b = 1\n11.    for i in range(0, n):\n12.      temp = b\n13.      b = a + b\n14.      a = temp\n15.    return b\n</bug_code>\n<stu_desc>\nThe student is a beginner to an intermediate programmer who is familiar with basic programming concepts but may still struggle with some details, such as loop iteration.\n</stu_desc>\n<dialogue>\nTeacher: Let's add a print statement to print the values of `a`, `b`, and `i` after each iteration to verify that. After executing the code what do you notice?\n</dialogue>",
            "most": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.  if n <= 0:\n3.    return \"OOPS\"\n4.  elif n == 1:\n5.    return 1\n6.  elif n == 2:\n7.    return 1\n8.  else:\n9.     a = 0\n10.    b = 1\n11.    for i in range(0, n):\n12.      temp = b\n13.      b = a + b\n14.      a = temp\n15.    return b\n</bug_code>\n<stu_desc>\nThe student is a beginner to an intermediate programmer who is familiar with basic programming concepts but may still struggle with some details, such as loop iteration.\n</stu_desc>\n<dialogue>\nTeacher: Do you think the issue could be that the loop is iterating one time too many and thus returning the (n+1)th term instead of the nth term?\n</dialogue>"
        },
        "0_2_fibonacci": {
            "solution": "On line 2, the function only checks if `n` is less than `0` and then returns `OOPS`. When `n` is 0 the function returns `1` which is incorrect. The function should instead return `'OOPS'` when `n` is equal to `0`. Replace `if n < 0` with `if n <= 0` on line 2.",
            "least": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.  if n < 0:\n3.    return \"OOPS\"\n4.  elif n == 1:\n5.    return 1\n6.  elif n == 2:\n7.    return 1\n8.  else:\n9.    a = 0\n10.    b = 1\n11.    for i in range(1, n):\n12.      temp = b \n13.      b = a + b \n14.      a = temp\n15.    return b\n</bug_code>\n<dialogue>\nTeacher: Let's start with a warm-up question. Consider the statement `x = 0`. What is the value of `y` in the following statement: `y = 1 if x < 0 else 0`?\n</dialogue>",
            "more": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.  if n < 0:\n3.    return \"OOPS\"\n4.  elif n == 1:\n5.    return 1\n6.  elif n == 2:\n7.    return 1\n8.  else:\n9.    a = 0\n10.    b = 1\n11.    for i in range(1, n):\n12.      temp = b \n13.      b = a + b \n14.      a = temp\n15.    return b\n</bug_code>\n<dialogue>\nTeacher: Can you walk me through your code step by step given that `n` is 0?\n</dialogue>",
            "most": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.  if n < 0:\n3.    return \"OOPS\"\n4.  elif n == 1:\n5.    return 1\n6.  elif n == 2:\n7.    return 1\n8.  else:\n9.    a = 0\n10.    b = 1\n11.    for i in range(1, n):\n12.      temp = b \n13.      b = a + b \n14.      a = temp\n15.    return b\n</bug_code>\n<dialogue>\nTeacher: How can you adjust the condition check for `n` on line 2 to correctly handle when `n` is 0?\n</dialogue>"
        },
        "0_5_fibonacci": {
            "solution": "`fibonacci(n)` calls `fibonacci(n)` on line 7 with the same argument `n` which leads to infinite recursion and consequently a runtime error is thrown.Replace `fibonacci(n) + fibonacci(n-1)` with `fibonacci(n-1) + fibonacci(n-2)` on line 7.",
            "least": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.    if n <= 0:\n3.        return \"OOPS\"\n4.    elif n == 1 or n == 2:\n5.        return 1\n6.    else:\n7.        return fibonacci(n) + fibonacci(n-1)\n</bug_code>\n<dialogue>\nTeacher: Can you explain what a recursive function is? When do we call a function recursive?\n</dialogue>",
            "more": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.    if n <= 0:\n3.        return \"OOPS\"\n4.    elif n == 1 or n == 2:\n5.        return 1\n6.    else:\n7.        return fibonacci(n) + fibonacci(n-1)\n</bug_code>\n<dialogue>\nTeacher: What happens if you call the fibonacci function with the same argument over and over again?\n</dialogue>",
            "most": "<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.    if n <= 0:\n3.        return \"OOPS\"\n4.    elif n == 1 or n == 2:\n5.        return 1\n6.    else:\n7.        return fibonacci(n) + fibonacci(n-1)\n</bug_code>\n<dialogue>\nTeacher: Do you see any problem with the parameters in the recursive call on line 7?\n</dialogue>"
        },
        "0_6_fibonacci": {
            "solution": "On line 4, the function checks whether `n` is equal to `1` and `2` at the same time, which is not possible. Consequently, the function will never return `1` as specified by the instructions.Replace `and` with `or` on line 4.",
            "least": "\n<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.    if n <= 0:\n3.        return \"OOPS\"\n4.    elif n == 1 and n == 2:\n5.        return 1\n6.    elif n > 2:\n7.        a = 1\n8.        b = 1\n9.        for i in range(3, n+1):\n10.            c = a + b\n11.            a = b\n12.            b = c\n13.        return b\n</bug_code>\n<dialogue>\nTeacher: So will it return `1` when `n` is only equal to `1`?\n</dialogue>",
            "more": "\n<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.    if n <= 0:\n3.        return \"OOPS\"\n4.    elif n == 1 and n == 2:\n5.        return 1\n6.    elif n > 2:\n7.        a = 1\n8.        b = 1\n9.        for i in range(3, n+1):\n10.            c = a + b\n11.            a = b\n12.            b = c\n13.        return b\n</bug_code>\n<dialogue>\nTeacher: Will `n` ever be `1` and `2` at the same time?\n</dialogue>",
            "most": "\n<problem>\nCreate a function `fibonacci(n:int)` that takes in a parameter `n`, an integer representing the number of terms in the Fibonacci sequence to generate, and returns:\n-  'OOPS', if `n` is less than or equal to 0 \n- `1`  if `n` is equal to `1`\n- `1` if `n` is equal to `2`\n- Otherwise, return the nth term of the Fibonacci sequence. A Fibonacci sequence is a sequence in which every number is the sum of the previous two numbers in the sequence. Example Fibonacci sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ....\n## Example Cases:\n```\nfibonacci(-3) => 'OOPS'\nfibonacci(0) => 'OOPS'\nfibonacci(1) =>1\nfibonacci(2) => 1\nfibonacci(5) => 5\nfibonacci(10) => 55\n```\n</problem>\n<bug_code>\n1. def fibonacci(n):\n2.    if n <= 0:\n3.        return \"OOPS\"\n4.    elif n == 1 and n == 2:\n5.        return 1\n6.    elif n > 2:\n7.        a = 1\n8.        b = 1\n9.        for i in range(3, n+1):\n10.            c = a + b\n11.            a = b\n12.            b = c\n13.        return b\n</bug_code>\n<dialogue>\nTeacher: How can you modify the condition on line 4 to return `1` when `n` is either `1` or `2`?\n</dialogue>"
        },
        "10_39_xnglxsh": {
            "solution": "On lines 5, 7, and 8, the calls `sen.replace` and `sen.swapcase` leave `sen` unchanged, because strings are immutable in Python. Consequently, the function returns `sen` as it is.Replace `sen.swapcase()` with `sen = sen.swapcase()` on line 8 and on lines 5 and 7 change `sen.replace` to `sen = sen.replace`.",
            "least": "<problem>\nCreate a method `toxNGLXSH(sen:str) -> str` that converts an English sentence to xNGLXSH in which every lowercase vowel is replaced with 'X', each uppercase vowel is replaced with 'x', every lowercase consonant is replaced with its uppercase version, and every uppercase consonant is replaced with its lowercase version.\n\n## Example Cases:\n```\ntoxNGLXSH('English') => 'xNGLXSH'\ntoxNGLXSH('hello there!') => 'HXLLX THXRX!'\ntoxNGLXSH(\"My name is John!\") => 'mY NXMX XS jXHN!'\ntoxNGLXSH('To be or not to be!') => 'tX BX XR NXT TX BX!'\ntoxNGLXSH('The quick brown fox jumped over the lazy rabbit.') => 'tHX QXXCK BRXWN FXX JXMPXD XVXR THX LXZY RXBBXT.'\n```\n</problem>\n<bug_code>\n1. def toxNGLXSH(sen):\n2.  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n3.  for i in vowels:\n4.      if i.islower():\n5.           sen.replace(i, \"x\")\n6.      else:\n7.           sen.replace(i, \"X\")\n8.  sen.swapcase()\n9.  return sen\n</bug_code>\n<dialogue>\nTeacher: Is there an easy way to modify your code to verify whether your code is modifying the original string?\n</dialogue>",
            "more": "<problem>\nCreate a method `toxNGLXSH(sen:str) -> str` that converts an English sentence to xNGLXSH in which every lowercase vowel is replaced with 'X', each uppercase vowel is replaced with 'x', every lowercase consonant is replaced with its uppercase version, and every uppercase consonant is replaced with its lowercase version.\n\n## Example Cases:\n```\ntoxNGLXSH('English') => 'xNGLXSH'\ntoxNGLXSH('hello there!') => 'HXLLX THXRX!'\ntoxNGLXSH(\"My name is John!\") => 'mY NXMX XS jXHN!'\ntoxNGLXSH('To be or not to be!') => 'tX BX XR NXT TX BX!'\ntoxNGLXSH('The quick brown fox jumped over the lazy rabbit.') => 'tHX QXXCK BRXWN FXX JXMPXD XVXR THX LXZY RXBBXT.'\n```\n</problem>\n<bug_code>\n1. def toxNGLXSH(sen):\n2.  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n3.  for i in vowels:\n4.      if i.islower():\n5.           sen.replace(i, \"x\")\n6.      else:\n7.           sen.replace(i, \"X\")\n8.  sen.swapcase()\n9.  return sen\n</bug_code>\n<dialogue>\nTeacher: Have you considered assigning the output of the method calls to a variable?\n</dialogue>",
            "most": "<problem>\nCreate a method `toxNGLXSH(sen:str) -> str` that converts an English sentence to xNGLXSH in which every lowercase vowel is replaced with 'X', each uppercase vowel is replaced with 'x', every lowercase consonant is replaced with its uppercase version, and every uppercase consonant is replaced with its lowercase version.\n\n## Example Cases:\n```\ntoxNGLXSH('English') => 'xNGLXSH'\ntoxNGLXSH('hello there!') => 'HXLLX THXRX!'\ntoxNGLXSH(\"My name is John!\") => 'mY NXMX XS jXHN!'\ntoxNGLXSH('To be or not to be!') => 'tX BX XR NXT TX BX!'\ntoxNGLXSH('The quick brown fox jumped over the lazy rabbit.') => 'tHX QXXCK BRXWN FXX JXMPXD XVXR THX LXZY RXBBXT.'\n```\n</problem>\n<bug_code>\n1. def toxNGLXSH(sen):\n2.  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n3.  for i in vowels:\n4.      if i.islower():\n5.           sen.replace(i, \"x\")\n6.      else:\n7.           sen.replace(i, \"X\")\n8.  sen.swapcase()\n9.  return sen\n</bug_code>\n<dialogue>\nTeacher: Do you know that strings are immutable in Python and any operation that manipulates a string returns a new string?\n</dialogue>"
        },
        "11_40_palindrome": {
            "solution": "On line 5, the function throws a syntax error.Replace `=` with `==` on line 5. ",
            "least": "<problem>\nWrite a function called `is_palindrome(string:str) -> bool` that returns True if the string is a palindrome and False otherwise. A palindrome is a string that is the same when read forwards and backwards.\n## Example Cases:\n```\nis_palindrome(\"racecar\") => True\nis_palindrome(\"hello\") => False\nis_palindrome(\"hannah\") => True\nis_palindrome(\"firetruck\") => False\nis_palindrome(\"nice\") => False\nis_palindrome(\"\") => True\n```\n</problem>\n<bug_code>\n1. def is_palindrome(string):\n2.  rev_string = ''\n3.  for i in string:\n4.    rev_string = i + rev_string\n5.  if rev_string = string:\n6.    return True\n7.  else:\n8.    return False\n</bug_code>\n<dialogue>\nTeacher: What are you trying to do in line 5?\n</dialogue>",
            "more": "<problem>\nWrite a function called `is_palindrome(string:str) -> bool` that returns True if the string is a palindrome and False otherwise. A palindrome is a string that is the same when read forwards and backwards.\n## Example Cases:\n```\nis_palindrome(\"racecar\") => True\nis_palindrome(\"hello\") => False\nis_palindrome(\"hannah\") => True\nis_palindrome(\"firetruck\") => False\nis_palindrome(\"nice\") => False\nis_palindrome(\"\") => True\n```\n</problem>\n<bug_code>\n1. def is_palindrome(string):\n2.  rev_string = ''\n3.  for i in string:\n4.    rev_string = i + rev_string\n5.  if rev_string = string:\n6.    return True\n7.  else:\n8.    return False\n</bug_code>\n<dialogue>\nTeacher: How would you check if two variables 'x' and 'y' are equivalent?\n</dialogue>",
            "most": "<problem>\nWrite a function called `is_palindrome(string:str) -> bool` that returns True if the string is a palindrome and False otherwise. A palindrome is a string that is the same when read forwards and backwards.\n## Example Cases:\n```\nis_palindrome(\"racecar\") => True\nis_palindrome(\"hello\") => False\nis_palindrome(\"hannah\") => True\nis_palindrome(\"firetruck\") => False\nis_palindrome(\"nice\") => False\nis_palindrome(\"\") => True\n```\n</problem>\n<bug_code>\n1. def is_palindrome(string):\n2.  rev_string = ''\n3.  for i in string:\n4.    rev_string = i + rev_string\n5.  if rev_string = string:\n6.    return True\n7.  else:\n8.    return False\n</bug_code>\n<dialogue>\nTeacher: Are you using the correct operator to compare `rev_string` and `string`?\n</dialogue>"
        },
        "12_41_reversing_a_list": {
            "solution": "On line 2, the way the slice operator is used creates a list containing only the last element in `lst` instead of a list containing all the elements of `lst` in reverse order.Replace `return lst[-1:]` with `return lst[::-1]` on line 2.",
            "least": "<problem>\nWrite a function `reverse_list(lst:List[any]) -> List[any]` that returns `lst` in reverse order.\n## Example Cases:\n```\nreverse_list([1, 2, 3]) => [3, 2, 1]\nreverse_list([1, 2, 3, 4, 5]) => [5, 4, 3, 2, 1]\nreverse_list([]) => []\nreverse_list([\"Hi\", \"Hello\", \"Goodbye\"]) => [\"Goodbye\", \"Hello\", \"Hi\"]\n```\n</problem>\n<bug_code>\n1. def reverse_list(lst):\n2.    return lst[-1:]\n</bug_code>\n<dialogue>\nTeacher: Can you describe what the `[-1:]` slicing operator does?\n</dialogue>",
            "more": "<problem>\nWrite a function `reverse_list(lst:List[any]) -> List[any]` that returns `lst` in reverse order.\n## Example Cases:\n```\nreverse_list([1, 2, 3]) => [3, 2, 1]\nreverse_list([1, 2, 3, 4, 5]) => [5, 4, 3, 2, 1]\nreverse_list([]) => []\nreverse_list([\"Hi\", \"Hello\", \"Goodbye\"]) => [\"Goodbye\", \"Hello\", \"Hi\"]\n```\n</problem>\n<bug_code>\n1. def reverse_list(lst):\n2.    return lst[-1:]\n</bug_code>\n<dialogue>\nTeacher: What happens when you run `reverse_list([1, 2, 3])`? What do you observe?\n</dialogue>",
            "most": "<problem>\nWrite a function `reverse_list(lst:List[any]) -> List[any]` that returns `lst` in reverse order.\n## Example Cases:\n```\nreverse_list([1, 2, 3]) => [3, 2, 1]\nreverse_list([1, 2, 3, 4, 5]) => [5, 4, 3, 2, 1]\nreverse_list([]) => []\nreverse_list([\"Hi\", \"Hello\", \"Goodbye\"]) => [\"Goodbye\", \"Hello\", \"Hi\"]\n```\n</problem>\n<bug_code>\n1. def reverse_list(lst):\n2.    return lst[-1:]\n</bug_code>\n<dialogue>\nTeacher: Do you know that the `[-1:]` slicing operator is only returning the last element of the list instead of reversing it? How can you adjust the slicing operator to reverse the list?\n</dialogue>"
        },
        "13_42_limit": {
            "solution": "On line 3, the for loop attempts iterating through `lst2` which is empty. Consequently, the for loop does not iterate and the function returns an empty list.Replace `lst2` with `lst` on line 3.",
            "least": "<problem>\nWrite a method `limitFinder(lst: List[int], limit: int) -> List[int]` that takes a list of numbers and a limit and returns a list of all the numbers in the list that are less than the limit.\n## Example Cases:\n```\nlimitFinder([1, 2, 3, 4, 5], 3) => [1, 2]\nlimitFinder([1, 5, 4, 3, 5], 6) => [1, 2, 3, 4, 5]\nlimitFinder([100, 2, 145, 3,8], 0) => []\nlimitFinder([-1, -3, -4, -2, -5], -3) => [-4, -5]\nlimitFinder([], 0) => []\n```\n</problem>\n<bug_code>\n1. def limitFinder(lst, limit):\n2.  lst2 = []\n3.  for i in lst2:\n4.    if i < limit:\n5.      lst2.append(i)\n6.  return lst2\n</bug_code>\n<dialogue>\nTeacher: Sure. Can you walk me through what each line does?\n</dialogue>",
            "more": "<problem>\nWrite a method `limitFinder(lst: List[int], limit: int) -> List[int]` that takes a list of numbers and a limit and returns a list of all the numbers in the list that are less than the limit.\n## Example Cases:\n```\nlimitFinder([1, 2, 3, 4, 5], 3) => [1, 2]\nlimitFinder([1, 5, 4, 3, 5], 6) => [1, 2, 3, 4, 5]\nlimitFinder([100, 2, 145, 3,8], 0) => []\nlimitFinder([-1, -3, -4, -2, -5], -3) => [-4, -5]\nlimitFinder([], 0) => []\n```\n</problem>\n<bug_code>\n1. def limitFinder(lst, limit):\n2.  lst2 = []\n3.  for i in lst2:\n4.    if i < limit:\n5.      lst2.append(i)\n6.  return lst2\n</bug_code>\n<dialogue>\nTeacher: Sure. It looks like your for-loop is never executed. Do you know why?\n</dialogue>",
            "most": "<problem>\nWrite a method `limitFinder(lst: List[int], limit: int) -> List[int]` that takes a list of numbers and a limit and returns a list of all the numbers in the list that are less than the limit.\n## Example Cases:\n```\nlimitFinder([1, 2, 3, 4, 5], 3) => [1, 2]\nlimitFinder([1, 5, 4, 3, 5], 6) => [1, 2, 3, 4, 5]\nlimitFinder([100, 2, 145, 3,8], 0) => []\nlimitFinder([-1, -3, -4, -2, -5], -3) => [-4, -5]\nlimitFinder([], 0) => []\n```\n</problem>\n<bug_code>\n1. def limitFinder(lst, limit):\n2.  lst2 = []\n3.  for i in lst2:\n4.    if i < limit:\n5.      lst2.append(i)\n6.  return lst2\n</bug_code>\n<dialogue>\nTeacher: Are you sure you should be looping over `lst2` and not `lst`?\n</dialogue>"
        },
        "14_43_used_twice": {
            "solution": "On line 8, the function throws a NameError since `true` is not a boolean value.Replace `true` with `True` and `false` with `False` on lines 8 and 10.",
            "least": "problem>\nWrite a function `isTwice(string:str, char:str) -> bool` that returns `True` if the character `char` appears exactly twice in the string `string`. Otherwise, it returns `False`.\n## Example Cases:\n```\nisTwice(\"hello\", \"l\") => True\nisTwice(\"hello\", \"o\") => False\nisTwice(\"hello\", \"h\") => False\nisTwice(\"\", \"e\") => False\nisTwice(\"I'm a string!\", \" \") => True\nisTwice(\"Hey, I'm a string!\", \" \") => False\n```\n</problem>\n<bug_code>\n1. def isTwice(str, chr):\n2.  count = 0\n3.  for i in str:\n4.    if i == chr:\n5.      count+=1\n6.\n7.  if count >= 2:\n8.    return true\n9.  else:\n10.    return false\n</bug_code>\n<dialogue>\nTeacher: Programming languages are very sensitive to syntax. For example, String variables require the use of quotations around their input. Can you think of any similar constraints to boolean inputs?\n</dialogue>",
            "more": "problem>\nWrite a function `isTwice(string:str, char:str) -> bool` that returns `True` if the character `char` appears exactly twice in the string `string`. Otherwise, it returns `False`.\n## Example Cases:\n```\nisTwice(\"hello\", \"l\") => True\nisTwice(\"hello\", \"o\") => False\nisTwice(\"hello\", \"h\") => False\nisTwice(\"\", \"e\") => False\nisTwice(\"I'm a string!\", \" \") => True\nisTwice(\"Hey, I'm a string!\", \" \") => False\n```\n</problem>\n<bug_code>\n1. def isTwice(str, chr):\n2.  count = 0\n3.  for i in str:\n4.    if i == chr:\n5.      count+=1\n6.\n7.  if count >= 2:\n8.    return true\n9.  else:\n10.    return false\n</bug_code>\n<dialogue>\nTeacher: Let's try that in the Python terminal. What happens when you type bool = false?\n</dialogue>",
            "most": "problem>\nWrite a function `isTwice(string:str, char:str) -> bool` that returns `True` if the character `char` appears exactly twice in the string `string`. Otherwise, it returns `False`.\n## Example Cases:\n```\nisTwice(\"hello\", \"l\") => True\nisTwice(\"hello\", \"o\") => False\nisTwice(\"hello\", \"h\") => False\nisTwice(\"\", \"e\") => False\nisTwice(\"I'm a string!\", \" \") => True\nisTwice(\"Hey, I'm a string!\", \" \") => False\n```\n</problem>\n<bug_code>\n1. def isTwice(str, chr):\n2.  count = 0\n3.  for i in str:\n4.    if i == chr:\n5.      count+=1\n6.\n7.  if count >= 2:\n8.    return true\n9.  else:\n10.    return false\n</bug_code>\n<dialogue>\nTeacher: \"Did you notice that boolean values in Python are capitalized?\"\n</dialogue>"
        },
        "15_44_sequential_search": {
            "solution": "On line 3, the function only checks if `x` is less than `seq[i]` and then returns the index `i` where `x` should be inserted. When `x` is in `seq` at position `i`, the function returns the next index `i + 1` instead of the current index `i`.Replace `<` with `<=` on line 3",
            "least": "<problem>\nWrite a function `search(x: int, seq: List[int]) -> int` that returns the index of the first occurrence of `x` in `seq`. If `x` is not in `seq`, return the index where `x` should be inserted to keep `seq` sorted. Assume that `seq` is sorted in ascending order.\n## Example Cases:\n```\nsearch(5, [-1, 5, 8, 10, 12]) => 1\nsearch(-2, [-1, 57, 65]) => 0\nsearch(0, [-120, 60, 78, 100]) => 1\nsearch(77, [-100, -50, 5, 44, 66, 76, 99]) => 6\nsearch(55, [-99, -2, 0]) => 3\n```\n</problem>\n<bug_code>\n1. def search(x, seq):\n2.  for i in range(len(seq)):\n3.    if x < seq[i]:\n4.      return i\n5.  return len(seq)\n</bug_code>\n<dialogue>\nTeacher: Sure. In the first test case, can you explain why the correct returned value should be 1?\n</dialogue>",
            "more": "<problem>\nWrite a function `search(x: int, seq: List[int]) -> int` that returns the index of the first occurrence of `x` in `seq`. If `x` is not in `seq`, return the index where `x` should be inserted to keep `seq` sorted. Assume that `seq` is sorted in ascending order.\n## Example Cases:\n```\nsearch(5, [-1, 5, 8, 10, 12]) => 1\nsearch(-2, [-1, 57, 65]) => 0\nsearch(0, [-120, 60, 78, 100]) => 1\nsearch(77, [-100, -50, 5, 44, 66, 76, 99]) => 6\nsearch(55, [-99, -2, 0]) => 3\n```\n</problem>\n<bug_code>\n1. def search(x, seq):\n2.  for i in range(len(seq)):\n3.    if x < seq[i]:\n4.      return i\n5.  return len(seq)\n</bug_code>\n<dialogue>\nTeacher: Sure. Let's consider the first test case, when the input `x` is 5 and the list `seq` has the value `[-1, 5, 8, 10, 12]`. When `i` takes the value 1 in line 2, what is the value of `seq[i],` and what happens when we run through `if` on line 3?\n</dialogue>",
            "most": "<problem>\nWrite a function `search(x: int, seq: List[int]) -> int` that returns the index of the first occurrence of `x` in `seq`. If `x` is not in `seq`, return the index where `x` should be inserted to keep `seq` sorted. Assume that `seq` is sorted in ascending order.\n## Example Cases:\n```\nsearch(5, [-1, 5, 8, 10, 12]) => 1\nsearch(-2, [-1, 57, 65]) => 0\nsearch(0, [-120, 60, 78, 100]) => 1\nsearch(77, [-100, -50, 5, 44, 66, 76, 99]) => 6\nsearch(55, [-99, -2, 0]) => 3\n```\n</problem>\n<bug_code>\n1. def search(x, seq):\n2.  for i in range(len(seq)):\n3.    if x < seq[i]:\n4.      return i\n5.  return len(seq)\n</bug_code>\n<dialogue>\nTeacher: So the input element `x = 5` is present at some position `i = 1` in the list `seq`. Does your code check for this?\n</dialogue>"
        },
        "15_45_sequential_search": {
            "solution": "The function returns `None` when `x` is greater than all of the elements in `seq` instead of returning the index indicating that `x` should be inserted at the end of the array.Insert a line following line 4, with one indentation containing `return len(seq)` ",
            "least": "<problem>\nWrite a function `search(x: int, seq: List[int]) -> int` that returns the index of the first occurrence of `x` in `seq`. If `x` is not in `seq`, return the index where `x` should be inserted to keep `seq` sorted. Assume that `seq` is sorted in ascending order.\n## Example Cases:\n```\nsearch(5, [-1, 5, 8, 10, 12]) => 1\nsearch(-2, [-1, 57, 65]) => 0\nsearch(0, [-120, 60, 78, 100]) => 1\nsearch(77, [-100, -50, 5, 44, 66, 76, 99]) => 6\nsearch(55, [-99, -2, 0]) => 3\n```\n</problem>\n<bug_code>\n1. def search(x, seq):\n2.  for i in range(len(seq)):\n3.    if x <= seq[i]:\n4.      return i\n</bug_code>\n<dialogue>\nTeacher: Interesting. Can you walk me through what `search(80, [-1, 57, 65])` looks like at each line of your code? What would you expect as the output?\n</dialogue>",
            "more": "<problem>\nWrite a function `search(x: int, seq: List[int]) -> int` that returns the index of the first occurrence of `x` in `seq`. If `x` is not in `seq`, return the index where `x` should be inserted to keep `seq` sorted. Assume that `seq` is sorted in ascending order.\n## Example Cases:\n```\nsearch(5, [-1, 5, 8, 10, 12]) => 1\nsearch(-2, [-1, 57, 65]) => 0\nsearch(0, [-120, 60, 78, 100]) => 1\nsearch(77, [-100, -50, 5, 44, 66, 76, 99]) => 6\nsearch(55, [-99, -2, 0]) => 3\n```\n</problem>\n<bug_code>\n1. def search(x, seq):\n2.  for i in range(len(seq)):\n3.    if x <= seq[i]:\n4.      return i\n</bug_code>\n<dialogue>\nTeacher: Compare and contrast the successful example `search(-2, [-1, 57, 65])` with the failing example `search(80, [-1, 57, 65])` where your function returns None. Does anything about `x` and `seq` in these examples stand out to you?\n</dialogue>",
            "most": "<problem>\nWrite a function `search(x: int, seq: List[int]) -> int` that returns the index of the first occurrence of `x` in `seq`. If `x` is not in `seq`, return the index where `x` should be inserted to keep `seq` sorted. Assume that `seq` is sorted in ascending order.\n## Example Cases:\n```\nsearch(5, [-1, 5, 8, 10, 12]) => 1\nsearch(-2, [-1, 57, 65]) => 0\nsearch(0, [-120, 60, 78, 100]) => 1\nsearch(77, [-100, -50, 5, 44, 66, 76, 99]) => 6\nsearch(55, [-99, -2, 0]) => 3\n```\n</problem>\n<bug_code>\n1. def search(x, seq):\n2.  for i in range(len(seq)):\n3.    if x <= seq[i]:\n4.      return i\n</bug_code>\n<dialogue>\nTeacher: What does your code do if `x` is greater than all of the elements in `seq`?\n</dialogue>"
        },
        "16_46_substring_length": {
            "solution": "The code does not check for the case when the longest substring is at the end of the string, therefore it fails on test examples 1 and 5.After line 11, insert the following outside the while loop scope:```pylast_str = s[start:]last_len = len(last_str)if last_len > max_len:       max_len = last_len```",
            "least": "<problem>\nWrite a function `substr_len(s: str, t: str) -> int` that takes as input a string `s` and a non-empty string `t` and returns the length of the longest substring of `s` that does not contain `t`. For example, if `s = \"abracadabra\"` and `t = \"ca\"`, then the longest substring of `s` that does not contain `t` is `\"dabra\"`, so the function should return 5.\n## Example Cases:\n```\nsubstr_len(\"abracadabra\", \"ca\") => 5\nsubstr_len(\"I love Python\", \"Py\") => 7\nsubstr_len(\"contest\", \"test\") => 3\nsubstr_len(\"icey ice\", \"ice\") => 2\nsubstr_len(\"icey ice cream\", \"ice\") => 6\nsubstr_len(\"abracadabra\", \"abba\") => 11\n```\n</problem>\n<bug_code>\n1. def substr_len(s, t):\n2.    max_len = 0\n3.    start = 0\n4.    pos = s.find(t, start)\n5.    while pos != -1:\n6.        crt_str = s[start:pos]\n7.        crt_len = len(crt_str)\n8.        if crt_len > max_len:\n9.            max_len = crt_len\n10.        start = pos + len(t)\n11.        pos = s.find(t, start)\n12.    return max_len\n</bug_code>\n<dialogue>\nTeacher: That's correct. What variable in your code stores the position where 'dabra' starts in s, and where does it end?\n</dialogue>",
            "more": "<problem>\nWrite a function `substr_len(s: str, t: str) -> int` that takes as input a string `s` and a non-empty string `t` and returns the length of the longest substring of `s` that does not contain `t`. For example, if `s = \"abracadabra\"` and `t = \"ca\"`, then the longest substring of `s` that does not contain `t` is `\"dabra\"`, so the function should return 5.\n## Example Cases:\n```\nsubstr_len(\"abracadabra\", \"ca\") => 5\nsubstr_len(\"I love Python\", \"Py\") => 7\nsubstr_len(\"contest\", \"test\") => 3\nsubstr_len(\"icey ice\", \"ice\") => 2\nsubstr_len(\"icey ice cream\", \"ice\") => 6\nsubstr_len(\"abracadabra\", \"abba\") => 11\n```\n</problem>\n<bug_code>\n1. def substr_len(s, t):\n2.    max_len = 0\n3.    start = 0\n4.    pos = s.find(t, start)\n5.    while pos != -1:\n6.        crt_str = s[start:pos]\n7.        crt_len = len(crt_str)\n8.        if crt_len > max_len:\n9.            max_len = crt_len\n10.        start = pos + len(t)\n11.        pos = s.find(t, start)\n12.    return max_len\n</bug_code>\n<dialogue>\nTeacher: That's correct. Can you now change your code so that it also considers the substring 'dabra'?\n</dialogue>",
            "most": "<problem>\nWrite a function `substr_len(s: str, t: str) -> int` that takes as input a string `s` and a non-empty string `t` and returns the length of the longest substring of `s` that does not contain `t`. For example, if `s = \"abracadabra\"` and `t = \"ca\"`, then the longest substring of `s` that does not contain `t` is `\"dabra\"`, so the function should return 5.\n## Example Cases:\n```\nsubstr_len(\"abracadabra\", \"ca\") => 5\nsubstr_len(\"I love Python\", \"Py\") => 7\nsubstr_len(\"contest\", \"test\") => 3\nsubstr_len(\"icey ice\", \"ice\") => 2\nsubstr_len(\"icey ice cream\", \"ice\") => 6\nsubstr_len(\"abracadabra\", \"abba\") => 11\n```\n</problem>\n<bug_code>\n1. def substr_len(s, t):\n2.    max_len = 0\n3.    start = 0\n4.    pos = s.find(t, start)\n5.    while pos != -1:\n6.        crt_str = s[start:pos]\n7.        crt_len = len(crt_str)\n8.        if crt_len > max_len:\n9.            max_len = crt_len\n10.        start = pos + len(t)\n11.        pos = s.find(t, start)\n12.    return max_len\n</bug_code>\n<dialogue>\nTeacher: Have you considered checking for a longest substring at the end of the string after the loop has finished executing?\n</dialogue>"
        },
        "16_56_substring_length": {
            "solution": "The value of `start` never changes inside the while loop, thus `pos` which is computed based on `start` never changes either. Consequently, the while loop on line 5 never stops.On line 8 insert the code `start = pos + len(t)`.On line 11 insert a new line with `ind += len(t)`.",
            "least": "<problem>\nWrite a function `substr_len(s: str, t: str) -> int` that takes as input a string `s` and a non-empty string `t` and returns the length of the longest substring of `s` that does not contain `t`. For example, if `s = \"abracadabra\"` and `t = \"ca\"`, then the longest substring of `s` that does not contain `t` is `\"dabra\"`, so the function should return 5.\n## Example Cases:\n```\nsubstr_len(\"abracadabra\", \"ca\") => 5\nsubstr_len(\"I love Python\", \"Py\") => 7\nsubstr_len(\"contest\", \"test\") => 3\nsubstr_len(\"icey ice\", \"ice\") => 2\nsubstr_len(\"icey ice cream\", \"ice\") => 6\nsubstr_len(\"abracadabra\", \"abba\") => 11\n```\n</problem>\n<bug_code>\n1. def substr_len(s, t):\n2.    max_len = 0\n3.    start = 0\n4.    pos = s.find(t, start)\n5.    while pos != -1:\n6.        crt_str = s[start:pos]\n7.        max_len = max(len(crt_str), max_len)        \n8.\n9.        pos = s.find(t, start)\n10.    \n11.    last_str = s[start:]\n12.    max_len = max(len(last_str), max_len)\n13.\n14.    return max_len\n</bug_code>\n<dialogue>\nTeacher: OK. Can you run your code manually on the first test example and tell me what are the values that start takes in each iteration of the while loop?\n</dialogue>",
            "more": "<problem>\nWrite a function `substr_len(s: str, t: str) -> int` that takes as input a string `s` and a non-empty string `t` and returns the length of the longest substring of `s` that does not contain `t`. For example, if `s = \"abracadabra\"` and `t = \"ca\"`, then the longest substring of `s` that does not contain `t` is `\"dabra\"`, so the function should return 5.\n## Example Cases:\n```\nsubstr_len(\"abracadabra\", \"ca\") => 5\nsubstr_len(\"I love Python\", \"Py\") => 7\nsubstr_len(\"contest\", \"test\") => 3\nsubstr_len(\"icey ice\", \"ice\") => 2\nsubstr_len(\"icey ice cream\", \"ice\") => 6\nsubstr_len(\"abracadabra\", \"abba\") => 11\n```\n</problem>\n<bug_code>\n1. def substr_len(s, t):\n2.    max_len = 0\n3.    start = 0\n4.    pos = s.find(t, start)\n5.    while pos != -1:\n6.        crt_str = s[start:pos]\n7.        max_len = max(len(crt_str), max_len)        \n8.\n9.        pos = s.find(t, start)\n10.    \n11.    last_str = s[start:]\n12.    max_len = max(len(last_str), max_len)\n13.\n14.    return max_len\n</bug_code>\n<dialogue>\nTeacher: OK. Does `start` ever change inside the while loop?\n</dialogue>",
            "most": "<problem>\nWrite a function `substr_len(s: str, t: str) -> int` that takes as input a string `s` and a non-empty string `t` and returns the length of the longest substring of `s` that does not contain `t`. For example, if `s = \"abracadabra\"` and `t = \"ca\"`, then the longest substring of `s` that does not contain `t` is `\"dabra\"`, so the function should return 5.\n## Example Cases:\n```\nsubstr_len(\"abracadabra\", \"ca\") => 5\nsubstr_len(\"I love Python\", \"Py\") => 7\nsubstr_len(\"contest\", \"test\") => 3\nsubstr_len(\"icey ice\", \"ice\") => 2\nsubstr_len(\"icey ice cream\", \"ice\") => 6\nsubstr_len(\"abracadabra\", \"abba\") => 11\n```\n</problem>\n<bug_code>\n1. def substr_len(s, t):\n2.    max_len = 0\n3.    start = 0\n4.    pos = s.find(t, start)\n5.    while pos != -1:\n6.        crt_str = s[start:pos]\n7.        max_len = max(len(crt_str), max_len)        \n8.\n9.        pos = s.find(t, start)\n10.    \n11.    last_str = s[start:]\n12.    max_len = max(len(last_str), max_len)\n13.\n14.    return max_len\n</bug_code>\n<dialogue>\nTeacher: Are you updating the `start` variable inside your while loop?\n</dialogue>"
        },
        "17_47_topk_socratic": {
            "solution": "The function removes the element at index `max(lst)` instead of removing an element equal to `max(lst)`. Consequently, the function throws an IndexError on line 5 when a removed value in `lst` is greater than the length of `lst`.On line 5, replace `lst.pop(max(lst))` with `lst.remove(max(lst))`",
            "least": "\n<problem>\nWrite a function `top_k(lst: List[int], k: int) -> List[int]` that returns the top k largest elements in the list. You can assume that k is always smaller than the length of the list.\n## Example Cases:\n```\ntop_k([1, 2, 3, 4, 5], 3) => [5, 4, 3]\ntop_k([-1, -2, -3, -4, -5], 3) => [-1, -2, -3]\ntop_k([], 0) => []\ntop_k([550, 750, 3000, 2000, 1000], 3) => [3000, 2000, 1000]\ntop_k([555, 777, 555, -1, 0], 3) => [777, 555, 555]\n```\n</problem>\n<bug_code>\n1. def top_k(lst, k):\n2.    result = []\n3.    for i in range(k):\n4.        result.append(max(lst))\n5.        lst.pop(max(lst))\n6.    return result\n</bug_code>\n<dialogue>\nTeacher: Ok, no worries. Let's review your code line by line. Could you please explain it to me?\n</dialogue>",
            "more": "\n<problem>\nWrite a function `top_k(lst: List[int], k: int) -> List[int]` that returns the top k largest elements in the list. You can assume that k is always smaller than the length of the list.\n## Example Cases:\n```\ntop_k([1, 2, 3, 4, 5], 3) => [5, 4, 3]\ntop_k([-1, -2, -3, -4, -5], 3) => [-1, -2, -3]\ntop_k([], 0) => []\ntop_k([550, 750, 3000, 2000, 1000], 3) => [3000, 2000, 1000]\ntop_k([555, 777, 555, -1, 0], 3) => [777, 555, 555]\n```\n</problem>\n<bug_code>\n1. def top_k(lst, k):\n2.    result = []\n3.    for i in range(k):\n4.        result.append(max(lst))\n5.        lst.pop(max(lst))\n6.    return result\n</bug_code>\n<dialogue>\nTeacher: Could you please explain what line 5 in your code does?\n</dialogue>",
            "most": "<problem>\nWrite a function `top_k(lst: List[int], k: int) -> List[int]` that returns the top k largest elements in the list. You can assume that k is always smaller than the length of the list.\n## Example Cases:\n```\ntop_k([1, 2, 3, 4, 5], 3) => [5, 4, 3]\ntop_k([-1, -2, -3, -4, -5], 3) => [-1, -2, -3]\ntop_k([], 0) => []\ntop_k([550, 750, 3000, 2000, 1000], 3) => [3000, 2000, 1000]\ntop_k([555, 777, 555, -1, 0], 3) => [777, 555, 555]\n```\n</problem>\n<bug_code>\n1. def top_k(lst, k):\n2.    result = []\n3.    for i in range(k):\n4.        result.append(max(lst))\n5.        lst.pop(max(lst))\n6.    return result\n</bug_code>\n<dialogue>\nTeacher: What if you replace the pop method with the remove method?\n</dialogue>"
        },
        "18_48_password_validator": {
            "solution": "The function does not add `password` to `passwords_dict` as specified in the instructions.After line 10 insert the following inside the `else` scope: `passwords_dict[len(passwords_dict) + 1] = password`",
            "least": "<problem>\nCreate a function `validate_or_add_password(menu_choice:str, password:str, passwords_dict:Dict[str,any]) -> str` that validates or adds a password. This function takes three parameters:\n* `menu_choice (str)`: either 'v' for validate or 'a' for add password\n* `password (str)`: the password to be validated or added\n* `passwords_dict (Dict[str,any])`: a dictionary containing the passwords\n\nThe function returns a string \"Welcome!\" if the password is found in the dictionary and menu_choice is 'v'. If the password is not found in the dictionary, the function returns \"I don't know you.\". If menu_choice is 'a', the function adds the password to the dictionary and returns \"Password added!\". If the password is already in the dictionary, the function returns \"Password already exists!\".\n## Example Cases:\n```\npasswords_dict = {1: \"abc123\", 2: \"qwerty\", 3: \"password\"}\nvalidate_or_add_password(\"v\", \"abc123\", passwords_dict) => \"Welcome!\"\nvalidate_or_add_password(\"v\", \"xyz789\", passwords_dict) => \"I don't know you.\"\nvalidate_or_add_password(\"a\", \"abc123\", passwords_dict) => \"Password already exists!\"\nvalidate_or_add_password(\"a\", \"newpass\", passwords_dict) => \"Password added!\"\npasswords_dict[4] => \"newpass\"\nvalidate_or_add_password(\"a\", \"newpass\", passwords_dict) => \"Password already exists!\"\n```\n</problem>\n<bug_code>\n1. def validate_or_add_password(menu_choice, password, passwords_dict):\n2.    if menu_choice == \"v\":\n3.        if password in passwords_dict.values():\n4.            return \"Welcome!\"\n5.        else:\n6.            return \"I don't know you.\"\n7.    elif menu_choice == \"a\":\n8.        if password in passwords_dict.values():\n9.            return \"Password already exists!\"\n10.        else:\n11.            return \"Password added!\"\n</bug_code>\n<dialogue>\nTeacher: Let's look through the Python documentation together. What does the error `KeyError: 4` mean and why does it occur?\n</dialogue>",
            "more": "<problem>\nCreate a function `validate_or_add_password(menu_choice:str, password:str, passwords_dict:Dict[str,any]) -> str` that validates or adds a password. This function takes three parameters:\n* `menu_choice (str)`: either 'v' for validate or 'a' for add password\n* `password (str)`: the password to be validated or added\n* `passwords_dict (Dict[str,any])`: a dictionary containing the passwords\n\nThe function returns a string \"Welcome!\" if the password is found in the dictionary and menu_choice is 'v'. If the password is not found in the dictionary, the function returns \"I don't know you.\". If menu_choice is 'a', the function adds the password to the dictionary and returns \"Password added!\". If the password is already in the dictionary, the function returns \"Password already exists!\".\n## Example Cases:\n```\npasswords_dict = {1: \"abc123\", 2: \"qwerty\", 3: \"password\"}\nvalidate_or_add_password(\"v\", \"abc123\", passwords_dict) => \"Welcome!\"\nvalidate_or_add_password(\"v\", \"xyz789\", passwords_dict) => \"I don't know you.\"\nvalidate_or_add_password(\"a\", \"abc123\", passwords_dict) => \"Password already exists!\"\nvalidate_or_add_password(\"a\", \"newpass\", passwords_dict) => \"Password added!\"\npasswords_dict[4] => \"newpass\"\nvalidate_or_add_password(\"a\", \"newpass\", passwords_dict) => \"Password already exists!\"\n```\n</problem>\n<bug_code>\n1. def validate_or_add_password(menu_choice, password, passwords_dict):\n2.    if menu_choice == \"v\":\n3.        if password in passwords_dict.values():\n4.            return \"Welcome!\"\n5.        else:\n6.            return \"I don't know you.\"\n7.    elif menu_choice == \"a\":\n8.        if password in passwords_dict.values():\n9.            return \"Password already exists!\"\n10.        else:\n11.            return \"Password added!\"\n</bug_code>\n<dialogue>\nTeacher: Let's try to reproduce this error. Open the Python terminal and run, `d  = {'a': 1}` then, run `print(d['b'])`. What do you observe?\n</dialogue>",
            "most": "<problem>\nCreate a function `validate_or_add_password(menu_choice:str, password:str, passwords_dict:Dict[str,any]) -> str` that validates or adds a password. This function takes three parameters:\n* `menu_choice (str)`: either 'v' for validate or 'a' for add password\n* `password (str)`: the password to be validated or added\n* `passwords_dict (Dict[str,any])`: a dictionary containing the passwords\n\nThe function returns a string \"Welcome!\" if the password is found in the dictionary and menu_choice is 'v'. If the password is not found in the dictionary, the function returns \"I don't know you.\". If menu_choice is 'a', the function adds the password to the dictionary and returns \"Password added!\". If the password is already in the dictionary, the function returns \"Password already exists!\".\n## Example Cases:\n```\npasswords_dict = {1: \"abc123\", 2: \"qwerty\", 3: \"password\"}\nvalidate_or_add_password(\"v\", \"abc123\", passwords_dict) => \"Welcome!\"\nvalidate_or_add_password(\"v\", \"xyz789\", passwords_dict) => \"I don't know you.\"\nvalidate_or_add_password(\"a\", \"abc123\", passwords_dict) => \"Password already exists!\"\nvalidate_or_add_password(\"a\", \"newpass\", passwords_dict) => \"Password added!\"\npasswords_dict[4] => \"newpass\"\nvalidate_or_add_password(\"a\", \"newpass\", passwords_dict) => \"Password already exists!\"\n```\n</problem>\n<bug_code>\n1. def validate_or_add_password(menu_choice, password, passwords_dict):\n2.    if menu_choice == \"v\":\n3.        if password in passwords_dict.values():\n4.            return \"Welcome!\"\n5.        else:\n6.            return \"I don't know you.\"\n7.    elif menu_choice == \"a\":\n8.        if password in passwords_dict.values():\n9.            return \"Password already exists!\"\n10.        else:\n11.            return \"Password added!\"\n</bug_code>\n<dialogue>\nTeacher: How can you modify your code to add the new password to the dictionary when menu_choice is a?\n</dialogue>"
        },
        "19_49_word_counter": {
            "solution": "On line 4, the for loop skips over the first character in the string `sentence`. Consequently, the function can miss counting a word if the first character in `sentence` is a word.On line 4, replace `(1, len(sentence))` with `(len(sentence)):`On line 4, replace `(1, len(sentence))` with `(0, len(sentence)):`",
            "least": "<problem>\nWrite a function `count_words(sentence: str) -> int` that returns the number of words in the sentence. A word is a maximal sequence of characters that does not contain spaces. For example, `count_words(\" This is a sentence \")` returns 4. \n## Example Cases:\n```\ncount_words(\"hello world\") => 2\ncount_words(\"hello    world\") => 2\ncount_words(\"This is a sentence\") => 4\ncount_words(\"I love Python\") => 3\ncount_words(\"\") => 0\ncount_words(\" \") => 0\n```\n</problem>\n<bug_code>\n1. def count_words(sentence):\n2.    words = 0\n3.    space_mode = True\n4.    for i in range(1, len(sentence)):\n5.        if sentence[i] == ' ':\n6.            if not space_mode:\n7.                words += 1\n8.            space_mode = True\n9.        else:\n10.            space_mode = False\n11.    if not space_mode:\n12.        words +=1\n13.    return words\n</bug_code>\n<dialogue>\nTeacher: It only happens with sentences that start with short words, it seems\n</dialogue>",
            "more": "<problem>\nWrite a function `count_words(sentence: str) -> int` that returns the number of words in the sentence. A word is a maximal sequence of characters that does not contain spaces. For example, `count_words(\" This is a sentence \")` returns 4. \n## Example Cases:\n```\ncount_words(\"hello world\") => 2\ncount_words(\"hello    world\") => 2\ncount_words(\"This is a sentence\") => 4\ncount_words(\"I love Python\") => 3\ncount_words(\"\") => 0\ncount_words(\" \") => 0\n```\n</problem>\n<bug_code>\n1. def count_words(sentence):\n2.    words = 0\n3.    space_mode = True\n4.    for i in range(1, len(sentence)):\n5.        if sentence[i] == ' ':\n6.            if not space_mode:\n7.                words += 1\n8.            space_mode = True\n9.        else:\n10.            space_mode = False\n11.    if not space_mode:\n12.        words +=1\n13.    return words\n</bug_code>\n<dialogue>\nTeacher: Where do you count your first word?\n</dialogue>",
            "most": "<problem>\nWrite a function `count_words(sentence: str) -> int` that returns the number of words in the sentence. A word is a maximal sequence of characters that does not contain spaces. For example, `count_words(\" This is a sentence \")` returns 4. \n## Example Cases:\n```\ncount_words(\"hello world\") => 2\ncount_words(\"hello    world\") => 2\ncount_words(\"This is a sentence\") => 4\ncount_words(\"I love Python\") => 3\ncount_words(\"\") => 0\ncount_words(\" \") => 0\n```\n</problem>\n<bug_code>\n1. def count_words(sentence):\n2.    words = 0\n3.    space_mode = True\n4.    for i in range(1, len(sentence)):\n5.        if sentence[i] == ' ':\n6.            if not space_mode:\n7.                words += 1\n8.            space_mode = True\n9.        else:\n10.            space_mode = False\n11.    if not space_mode:\n12.        words +=1\n13.    return words\n</bug_code>\n<dialogue>\nTeacher: Could the problem be with your loop starting from the second character of the sentence?\n</dialogue>"
        },
        "19_50_word_counter": {
            "solution": "There is an off-by-one error where the last word in `sentence` is not counted when `sentence` ends with a non-space token.Insert the following after line 10 outside the scope of the for loop:```pyif not space_mode:     words +=1```",
            "least": "<problem>\nWrite a function `count_words(sentence: str) -> int` that returns the number of words in the sentence. A word is a maximal sequence of characters that does not contain spaces. For example, `count_words(\" This is a sentence \")` returns 4. \n## Example Cases:\n```\ncount_words(\"hello world\") => 2\ncount_words(\"hello    world\") => 2\ncount_words(\"This is a sentence\") => 4\ncount_words(\"I love Python\") => 3\ncount_words(\"\") => 0\ncount_words(\" \") => 0\n```\n</problem>\n<bug_code>\n1. def count_words(sentence):\n2.    words = 0\n3.    space_mode = True\n4.    for c in sentence:\n5.        if c == ' ':\n6.            if not space_mode:\n7.                words += 1\n8.            space_mode = True\n9.        else:\n10.            space_mode = False\n11.    return words\n</bug_code>\n<dialogue>\nTeacher: Ok. What happens when you reach the end of the sentence?\n</dialogue>",
            "more": "<problem>\nWrite a function `count_words(sentence: str) -> int` that returns the number of words in the sentence. A word is a maximal sequence of characters that does not contain spaces. For example, `count_words(\" This is a sentence \")` returns 4. \n## Example Cases:\n```\ncount_words(\"hello world\") => 2\ncount_words(\"hello    world\") => 2\ncount_words(\"This is a sentence\") => 4\ncount_words(\"I love Python\") => 3\ncount_words(\"\") => 0\ncount_words(\" \") => 0\n```\n</problem>\n<bug_code>\n1. def count_words(sentence):\n2.    words = 0\n3.    space_mode = True\n4.    for c in sentence:\n5.        if c == ' ':\n6.            if not space_mode:\n7.                words += 1\n8.            space_mode = True\n9.        else:\n10.            space_mode = False\n11.    return words\n</bug_code>\n<dialogue>\nTeacher: Does your loop count the last word in the sentence?\n</dialogue>",
            "most": "<problem>\nWrite a function `count_words(sentence: str) -> int` that returns the number of words in the sentence. A word is a maximal sequence of characters that does not contain spaces. For example, `count_words(\" This is a sentence \")` returns 4. \n## Example Cases:\n```\ncount_words(\"hello world\") => 2\ncount_words(\"hello    world\") => 2\ncount_words(\"This is a sentence\") => 4\ncount_words(\"I love Python\") => 3\ncount_words(\"\") => 0\ncount_words(\" \") => 0\n```\n</problem>\n<bug_code>\n1. def count_words(sentence):\n2.    words = 0\n3.    space_mode = True\n4.    for c in sentence:\n5.        if c == ' ':\n6.            if not space_mode:\n7.                words += 1\n8.            space_mode = True\n9.        else:\n10.            space_mode = False\n11.    return words\n</bug_code>\n<dialogue>\nTeacher: How can you modify your function to count the last word in a sentence?\n</dialogue>"
        },
        "1_10_calculating_a_grade": {
            "solution": "On lines 10, 12, 14, and 16 the function uses `finalScore`, which is not rounded to the nearest integer, to determine the `letterGrade`.  Consequently, the function returns the incorrect `letterGrade` on edge cases where the closest integer is in a new category.Replace `finalScore` with `roundedScore` on lines 10, 12, 14, and 16.",
            "least": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    hw = hw * 0.2\n3.    exams = exams * 0.4\n4.    projects = projects * 0.30\n5.    att = att * 0.10\n6.\n7.    finalScore = hw + exams + projects + att\n8.    roundedScore = round(finalScore)\n9.\n10.    if finalScore >= 90:\n11.        letterGrade = \"A\"\n12.    elif finalScore >= 80:\n13.        letterGrade = \"B\"\n14.    elif finalScore >= 70:\n15.        letterGrade = \"C\"\n16.    elif finalScore >= 60:\n17.        letterGrade = \"D\"\n18.    else:\n19.        letterGrade = \"F\"\n20.    return letterGrade, roundedScore\n</bug_code>\n<dialogue>\nTeacher: Let\u2019s trace back what your function did. Where did D in your returned tuple come from?\n</dialogue>",
            "more": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    hw = hw * 0.2\n3.    exams = exams * 0.4\n4.    projects = projects * 0.30\n5.    att = att * 0.10\n6.\n7.    finalScore = hw + exams + projects + att\n8.    roundedScore = round(finalScore)\n9.\n10.    if finalScore >= 90:\n11.        letterGrade = \"A\"\n12.    elif finalScore >= 80:\n13.        letterGrade = \"B\"\n14.    elif finalScore >= 70:\n15.        letterGrade = \"C\"\n16.    elif finalScore >= 60:\n17.        letterGrade = \"D\"\n18.    else:\n19.        letterGrade = \"F\"\n20.    return letterGrade, roundedScore\n</bug_code>\n<dialogue>\nTeacher: Let\u2019s add a print statement for finalScore, roundedScore, and letterGrade after line 19. What do you observe about those values?\n</dialogue>",
            "most": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    hw = hw * 0.2\n3.    exams = exams * 0.4\n4.    projects = projects * 0.30\n5.    att = att * 0.10\n6.\n7.    finalScore = hw + exams + projects + att\n8.    roundedScore = round(finalScore)\n9.\n10.    if finalScore >= 90:\n11.        letterGrade = \"A\"\n12.    elif finalScore >= 80:\n13.        letterGrade = \"B\"\n14.    elif finalScore >= 70:\n15.        letterGrade = \"C\"\n16.    elif finalScore >= 60:\n17.        letterGrade = \"D\"\n18.    else:\n19.        letterGrade = \"F\"\n20.    return letterGrade, roundedScore\n</bug_code>\n<dialogue>\nTeacher: Are you using `finalScore` or `roundedScore` to determine the `letterGrade`?\n</dialogue>"
        },
        "1_11_calculating_a_grade": {
            "solution": "The return statement on line 15 is never executed. Consequently, the function only returns a string `letterGrade` instead of returning a tuple with a string and an integer containing the letter grade and the rounded final score respectively.Remove line 15 and replace `letterGrade` with `(letterGrade, roundedScore)` on line 15.",
            "least": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    roundedScore = round(finalScore)\n4.    if roundedScore >= 90:\n5.        letterGrade = \"A\"\n6.    elif roundedScore >= 80:\n7.        letterGrade = \"B\"\n8.    elif roundedScore >= 70:\n9.        letterGrade = \"C\"\n10.   elif roundedScore >= 60:\n11.       letterGrade = \"D\"\n12.   else:\n13.       letterGrade = \"F\"\n14.   return letterGrade\n15.   return roundedScore\n</bug_code>\n<dialogue>\nTeacher: Hello. Can you describe your code line by line?\n</dialogue>",
            "more": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    roundedScore = round(finalScore)\n4.    if roundedScore >= 90:\n5.        letterGrade = \"A\"\n6.    elif roundedScore >= 80:\n7.        letterGrade = \"B\"\n8.    elif roundedScore >= 70:\n9.        letterGrade = \"C\"\n10.   elif roundedScore >= 60:\n11.       letterGrade = \"D\"\n12.   else:\n13.       letterGrade = \"F\"\n14.   return letterGrade\n15.   return roundedScore\n</bug_code>\n<dialogue>\nTeacher: Hi. Let's recall what you know about return statements in Python. What happens when a compiler encounters a return statement?\n</dialogue>",
            "most": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    roundedScore = round(finalScore)\n4.    if roundedScore >= 90:\n5.        letterGrade = \"A\"\n6.    elif roundedScore >= 80:\n7.        letterGrade = \"B\"\n8.    elif roundedScore >= 70:\n9.        letterGrade = \"C\"\n10.   elif roundedScore >= 60:\n11.       letterGrade = \"D\"\n12.   else:\n13.       letterGrade = \"F\"\n14.   return letterGrade\n15.   return roundedScore\n</bug_code>\n<dialogue>\nTeacher: Is it possible that your function is returning too early, before it gets to line 15?\n</dialogue>"
        },
        "1_13_calculating _a_grade": {
            "solution": "On lines 2 and 3, the `weights` and `grades` are not parallel arrays. Consequently, the function will return an incorrect weighted sum of the final grade.On line 2 replace `[0.1, 0.3, 0.4, 0.2]` with `[0.2, 0.4, 0.3, 0.1]`.On line 3 replace `[hw, exams, projects, att]` with  ` [att, projects, exams, hw]`.",
            "least": "\n<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(100, 89, 85, 90) == ('A', 90)\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    weights = [0.1, 0.3, 0.4, 0.2]\n3.    grades = [hw, exams, projects, att]\n4.    final_grade = 0\n5.    for i in range(len(weights)):\n6.        final_grade += weights[i] * grades[i]\n7.    final_grade = round(final_grade)\n8.    \n9.    if final_grade >= 90:\n10.        return ('A', final_grade)\n11.    elif final_grade >= 80:\n12.        return ('B', final_grade)\n13.    elif final_grade >= 70:\n14.        return ('C', final_grade)\n15.    elif final_grade >= 60:\n16.        return ('D', final_grade)\n17.    else:\n18.        return ('F', final_grade)\n</bug_code>\n<dialogue>\nTeacher: Why?\n</dialogue>",
            "more": "\n<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(100, 89, 85, 90) == ('A', 90)\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    weights = [0.1, 0.3, 0.4, 0.2]\n3.    grades = [hw, exams, projects, att]\n4.    final_grade = 0\n5.    for i in range(len(weights)):\n6.        final_grade += weights[i] * grades[i]\n7.    final_grade = round(final_grade)\n8.    \n9.    if final_grade >= 90:\n10.        return ('A', final_grade)\n11.    elif final_grade >= 80:\n12.        return ('B', final_grade)\n13.    elif final_grade >= 70:\n14.        return ('C', final_grade)\n15.    elif final_grade >= 60:\n16.        return ('D', final_grade)\n17.    else:\n18.        return ('F', final_grade)\n</bug_code>\n<dialogue>\nTeacher: Look back at the instructions, what should the weight be for the first value?\n</dialogue>",
            "most": "\n<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(100, 89, 85, 90) == ('A', 90)\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    weights = [0.1, 0.3, 0.4, 0.2]\n3.    grades = [hw, exams, projects, att]\n4.    final_grade = 0\n5.    for i in range(len(weights)):\n6.        final_grade += weights[i] * grades[i]\n7.    final_grade = round(final_grade)\n8.    \n9.    if final_grade >= 90:\n10.        return ('A', final_grade)\n11.    elif final_grade >= 80:\n12.        return ('B', final_grade)\n13.    elif final_grade >= 70:\n14.        return ('C', final_grade)\n15.    elif final_grade >= 60:\n16.        return ('D', final_grade)\n17.    else:\n18.        return ('F', final_grade)\n</bug_code>\n<dialogue>\nTeacher: Are the weights and grades arrays correctly aligned?\n</dialogue>"
        },
        "1_8_calculating_a_grade": {
            "solution": "When `roundedScore` is `90` the if statement on line 4 evaluates to False, since `90` is not strictly greater than `90`.  Consequently, the function assigns `B` to `letterGrade` which is incorrect.Replace `roundedScore > 90` with `roundedScore >= 90` on line 4.",
            "least": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\nThe letter grade should be determined based on the following scale:\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    roundedScore = round(finalScore)\n4.    if roundedScore > 90:\n5.        letterGrade = \"A\"\n6.    elif roundedScore >= 80:\n7.        letterGrade = \"B\"\n8.    elif roundedScore >= 70:\n9.        letterGrade = \"C\"\n10.    elif roundedScore >= 60:\n11.        letterGrade = \"D\"\n12.    else:\n13.        letterGrade = \"F\"\n14.    return letterGrade, roundedScore\n</bug_code>\n<dialogue>\nTeacher: Is the `finalScore` correct for that test case?\n</dialogue>",
            "more": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\nThe letter grade should be determined based on the following scale:\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    roundedScore = round(finalScore)\n4.    if roundedScore > 90:\n5.        letterGrade = \"A\"\n6.    elif roundedScore >= 80:\n7.        letterGrade = \"B\"\n8.    elif roundedScore >= 70:\n9.        letterGrade = \"C\"\n10.    elif roundedScore >= 60:\n11.        letterGrade = \"D\"\n12.    else:\n13.        letterGrade = \"F\"\n14.    return letterGrade, roundedScore\n</bug_code>\n<dialogue>\nTeacher: Do you think it is a problem matching the grade to the letter?\n</dialogue>",
            "most": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\nThe letter grade should be determined based on the following scale:\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n## Example Cases:\n```\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\ncalculateGrade(100, 89, 85, 90) => ('A', 90)\ncalculateGrade(72, 96, 74, 98) => ('B', 85)\ncalculateGrade(100, 82, 68, 94) => ('B', 83)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(12, 14, 23, 10) => ('F', 16)\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    roundedScore = round(finalScore)\n4.    if roundedScore > 90:\n5.        letterGrade = \"A\"\n6.    elif roundedScore >= 80:\n7.        letterGrade = \"B\"\n8.    elif roundedScore >= 70:\n9.        letterGrade = \"C\"\n10.    elif roundedScore >= 60:\n11.        letterGrade = \"D\"\n12.    else:\n13.        letterGrade = \"F\"\n14.    return letterGrade, roundedScore\n</bug_code>\n<dialogue>\nTeacher: How can you adjust the condition in your first if statement to correctly assign an A grade?\n</dialogue>"
        },
        "1_9_calculating_a_grade": {
            "solution": "The function does not round `finalScore` to the nearest whole number. Consequently, when `finalScore` is `69.6` the function will return `D` instead of `C` as `letterGrade`. The function also returns a float `finalScore` instead of an integer.After line 2, add a new line with the following snippet `finalScore = round(finalScore)`.",
            "least": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(100, 89, 85, 90) == ('A', 90)\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    if finalScore >= 90:\n4.        letterGrade = \"A\"\n5.    elif finalScore >= 80:\n6.        letterGrade = \"B\"\n7.    elif finalScore >= 70:\n8.        letterGrade = \"C\"\n9.    elif finalScore >= 60:\n10.        letterGrade = \"D\"\n11.    else:\n12.        letterGrade = \"F\"\n13.    return letterGrade, finalScore\n</bug_code>\n<dialogue>\nTeacher: What do you think could be missing in your calculation?\n</dialogue>",
            "more": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(100, 89, 85, 90) == ('A', 90)\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    if finalScore >= 90:\n4.        letterGrade = \"A\"\n5.    elif finalScore >= 80:\n6.        letterGrade = \"B\"\n7.    elif finalScore >= 70:\n8.        letterGrade = \"C\"\n9.    elif finalScore >= 60:\n10.        letterGrade = \"D\"\n11.    else:\n12.        letterGrade = \"F\"\n13.    return letterGrade, finalScore\n</bug_code>\n<dialogue>\nTeacher: Do you know any method that can give you a rounded number?\n</dialogue>",
            "most": "<problem>\nCreate a method `calculateGrade(hw:float, exams: float, projects: float, att:float) -> Tuple[str, int]` that takes in four float parameters between 0 and 100 representing a student's grades in four different categories: Homework (`hw`) which is worth 20% of the final grade, Exams (`exams`) worth 40% of the final grade, Projects (`projects`) worth 30%, and Attendance (`att`), worth 10%. The function should calculate the final grade a student is getting and return a tuple containing the final letter grade and the final numeric grade rounded up to the nearest whole number.\n\nThe letter grade should be determined based on the following scale:\n\n* A for a final rounded grade between 90 and 100 (inclusive)\n* B for a final rounded grade between 80 and 89 (inclusive)\n* C for a final rounded grade between 70 and 79 (inclusive)\n* D for a final rounded  grade between 60 and 69 (inclusive)\n* F for a final rounded grade below 60.\n\nFor example, if you enter `calculateGrade(75, 60, 73, 87)`, the function should return `('C', 70)` because the final raw score is `69.6` which rounds up to `70` and corresponds to a letter grade of `C`.\n\n## Example Cases:\n```\ncalculateGrade(0, 0, 0, 0) => ('F', 0)\ncalculateGrade(70, 60, 65, 70) => ('D', 64)\ncalculateGrade(75, 60, 73, 100) => ('C', 71)\ncalculateGrade(75, 60, 73, 87) => ('C', 70)\ncalculateGrade(100, 89, 85, 90) == ('A', 90)\ncalculateGrade(100, 100, 100, 100) => ('A', 100)\n```\n</problem>\n<bug_code>\n1. def calculateGrade(hw, exams, projects, att):\n2.    finalScore = hw * 0.2 + exams * 0.4 + projects * 0.3 + att * 0.1\n3.    if finalScore >= 90:\n4.        letterGrade = \"A\"\n5.    elif finalScore >= 80:\n6.        letterGrade = \"B\"\n7.    elif finalScore >= 70:\n8.        letterGrade = \"C\"\n9.    elif finalScore >= 60:\n10.        letterGrade = \"D\"\n11.    else:\n12.        letterGrade = \"F\"\n13.    return letterGrade, finalScore\n</bug_code>\n<dialogue>\nTeacher: Are you missing a rounding operation in your code?\n</dialogue>"
        },
        "20_51_spell_checker": {
            "solution": "The function returns `None` instead of an iterable of strings.After line 7, insert `return result` with one indentation level.",
            "least": "<problem>\nWrite a function `spellchecker(words: List[str], words_to_check: List[str]) -> Iterable[str]` that takes in a list of words and a list of words to check. The function should return an iterable of strings that indicate whether or not each word in `words_to_check` are spelled properly. A word is spelled properly if it is in the `words` list. If a word is spelled properly, the string should say \"[word] is spelled properly!\". If a word is misspelled, the string should say \"[word] is misspelled!\". The order of the strings in the returned list should be the same as the order of the words in `words_to_check`.\n## Example Cases:\n```\nlist(spellchecker([\"dog\", \"cat\", \"giraffe\", \"horse\", \"dragon\"], [\"dogz\", \"cet\", \"giraffe\", \"horsee\", \"dragon\"])) => [\"dogz is misspelled!\", \"cet is misspelled!\", \"giraffe is spelled properly!\", \"horsee is misspelled!\", \"dragon is spelled properly!\"]\nlist(spellchecker([\"apple\", \"banana\", \"orange\", \"pear\", \"grape\"], [\"apple\", \"baana\", \"orange\", \"pier\", \"grayp\"])) => [\"apple is spelled properly!\", \"baana is misspelled!\", \"orange is spelled properly!\", \"pier is misspelled!\", \"grayp is misspelled!\"]\nlist(spellchecker(['bubbles', 'cup', 'food'], ['bubbles', 'cup', 'food', 'bubbles', 'cup', 'food'])) => ['bubbles is spelled properly!', 'cup is spelled properly!', 'food is spelled properly!', 'bubbles is spelled properly!', 'cup is spelled properly!', 'food is spelled properly!']\nlist(spellchecker([], ['bubbles', 'cup', 'food'])) => ['bubbles is misspelled!', 'cup is misspelled!', 'food is misspelled!']\n```\n</problem>\n<bug_code>\n1. def spellchecker(words, words_to_check):\n2.    result = []\n3.    for word in words_to_check:\n4.        if word in words:\n5.            result.append(word + \" is spelled properly!\")\n6.        else:\n7.            result.append(word + \" is misspelled!\")\n</bug_code>\n<dialogue>\nTeacher: Okay, so let's break that down. Let's focus on the NoneType part, what is a NoneType?\n</dialogue>",
            "more": "<problem>\nWrite a function `spellchecker(words: List[str], words_to_check: List[str]) -> Iterable[str]` that takes in a list of words and a list of words to check. The function should return an iterable of strings that indicate whether or not each word in `words_to_check` are spelled properly. A word is spelled properly if it is in the `words` list. If a word is spelled properly, the string should say \"[word] is spelled properly!\". If a word is misspelled, the string should say \"[word] is misspelled!\". The order of the strings in the returned list should be the same as the order of the words in `words_to_check`.\n## Example Cases:\n```\nlist(spellchecker([\"dog\", \"cat\", \"giraffe\", \"horse\", \"dragon\"], [\"dogz\", \"cet\", \"giraffe\", \"horsee\", \"dragon\"])) => [\"dogz is misspelled!\", \"cet is misspelled!\", \"giraffe is spelled properly!\", \"horsee is misspelled!\", \"dragon is spelled properly!\"]\nlist(spellchecker([\"apple\", \"banana\", \"orange\", \"pear\", \"grape\"], [\"apple\", \"baana\", \"orange\", \"pier\", \"grayp\"])) => [\"apple is spelled properly!\", \"baana is misspelled!\", \"orange is spelled properly!\", \"pier is misspelled!\", \"grayp is misspelled!\"]\nlist(spellchecker(['bubbles', 'cup', 'food'], ['bubbles', 'cup', 'food', 'bubbles', 'cup', 'food'])) => ['bubbles is spelled properly!', 'cup is spelled properly!', 'food is spelled properly!', 'bubbles is spelled properly!', 'cup is spelled properly!', 'food is spelled properly!']\nlist(spellchecker([], ['bubbles', 'cup', 'food'])) => ['bubbles is misspelled!', 'cup is misspelled!', 'food is misspelled!']\n```\n</problem>\n<bug_code>\n1. def spellchecker(words, words_to_check):\n2.    result = []\n3.    for word in words_to_check:\n4.        if word in words:\n5.            result.append(word + \" is spelled properly!\")\n6.        else:\n7.            result.append(word + \" is misspelled!\")\n</bug_code>\n<dialogue>\nTeacher: Check the python documentation, why do functions return NoneType objects?\n</dialogue>",
            "most": "<problem>\nWrite a function `spellchecker(words: List[str], words_to_check: List[str]) -> Iterable[str]` that takes in a list of words and a list of words to check. The function should return an iterable of strings that indicate whether or not each word in `words_to_check` are spelled properly. A word is spelled properly if it is in the `words` list. If a word is spelled properly, the string should say \"[word] is spelled properly!\". If a word is misspelled, the string should say \"[word] is misspelled!\". The order of the strings in the returned list should be the same as the order of the words in `words_to_check`.\n## Example Cases:\n```\nlist(spellchecker([\"dog\", \"cat\", \"giraffe\", \"horse\", \"dragon\"], [\"dogz\", \"cet\", \"giraffe\", \"horsee\", \"dragon\"])) => [\"dogz is misspelled!\", \"cet is misspelled!\", \"giraffe is spelled properly!\", \"horsee is misspelled!\", \"dragon is spelled properly!\"]\nlist(spellchecker([\"apple\", \"banana\", \"orange\", \"pear\", \"grape\"], [\"apple\", \"baana\", \"orange\", \"pier\", \"grayp\"])) => [\"apple is spelled properly!\", \"baana is misspelled!\", \"orange is spelled properly!\", \"pier is misspelled!\", \"grayp is misspelled!\"]\nlist(spellchecker(['bubbles', 'cup', 'food'], ['bubbles', 'cup', 'food', 'bubbles', 'cup', 'food'])) => ['bubbles is spelled properly!', 'cup is spelled properly!', 'food is spelled properly!', 'bubbles is spelled properly!', 'cup is spelled properly!', 'food is spelled properly!']\nlist(spellchecker([], ['bubbles', 'cup', 'food'])) => ['bubbles is misspelled!', 'cup is misspelled!', 'food is misspelled!']\n```\n</problem>\n<bug_code>\n1. def spellchecker(words, words_to_check):\n2.    result = []\n3.    for word in words_to_check:\n4.        if word in words:\n5.            result.append(word + \" is spelled properly!\")\n6.        else:\n7.            result.append(word + \" is misspelled!\")\n</bug_code>\n<dialogue>\nTeacher: Are you returning the result from your function?\n</dialogue>"
        },
        "21_52_fahrenheit_to_celsius": {
            "solution": "If `temp` is equal to 32, the function returns \"It's not freezing!\" rather than \"Freezing!\"On line 3, change `<` to `<=`.",
            "least": "<problem>\nWrite a function `fToC(temp: float) -> str` that takes in a temperature in Fahrenheit and returns a string that indicates whether or not the temperature is below freezing. If the temperature in Celcius is less than or equal to 0, the string should say \"Freezing!\". If the temperature in Celsius is above 0, the string should say \"It's not freezing!\". The formula for converting Fahrenheit to Celsius is $C = (F - 32) * \\frac{5}{9}$. Note that the function should return a string, not a float.\n## Example Cases:\n```\nfToC(32.0) => \"Freezing!\"\nfToC(0.5) => \"Freezing!\"\nfToC(45.0) => \"It's not freezing!\"\nfToC(-5.4) == \"Freezing!\"\n```\n</problem>\n<bug_code>\n1. def fToC(temp):\n2.  c = (temp - 32) * (5/9)\n3.  if c < 0:\n4.    return \"Freezing!\"\n5.  else:\n6.    return \"It's not freezing!\"\n</bug_code>\n<dialogue>\nTeacher: Let's take a look at the if-statement block. Do you remember what the \"<\" operator does?\n</dialogue>",
            "more": "<problem>\nWrite a function `fToC(temp: float) -> str` that takes in a temperature in Fahrenheit and returns a string that indicates whether or not the temperature is below freezing. If the temperature in Celcius is less than or equal to 0, the string should say \"Freezing!\". If the temperature in Celsius is above 0, the string should say \"It's not freezing!\". The formula for converting Fahrenheit to Celsius is $C = (F - 32) * \\frac{5}{9}$. Note that the function should return a string, not a float.\n## Example Cases:\n```\nfToC(32.0) => \"Freezing!\"\nfToC(0.5) => \"Freezing!\"\nfToC(45.0) => \"It's not freezing!\"\nfToC(-5.4) == \"Freezing!\"\n```\n</problem>\n<bug_code>\n1. def fToC(temp):\n2.  c = (temp - 32) * (5/9)\n3.  if c < 0:\n4.    return \"Freezing!\"\n5.  else:\n6.    return \"It's not freezing!\"\n</bug_code>\n<dialogue>\nTeacher: Let's take a look at the if-statement block in line 3. What happens if `c` is equal to 0?\n</dialogue>",
            "most": "<problem>\nWrite a function `fToC(temp: float) -> str` that takes in a temperature in Fahrenheit and returns a string that indicates whether or not the temperature is below freezing. If the temperature in Celcius is less than or equal to 0, the string should say \"Freezing!\". If the temperature in Celsius is above 0, the string should say \"It's not freezing!\". The formula for converting Fahrenheit to Celsius is $C = (F - 32) * \\frac{5}{9}$. Note that the function should return a string, not a float.\n## Example Cases:\n```\nfToC(32.0) => \"Freezing!\"\nfToC(0.5) => \"Freezing!\"\nfToC(45.0) => \"It's not freezing!\"\nfToC(-5.4) == \"Freezing!\"\n```\n</problem>\n<bug_code>\n1. def fToC(temp):\n2.  c = (temp - 32) * (5/9)\n3.  if c < 0:\n4.    return \"Freezing!\"\n5.  else:\n6.    return \"It's not freezing!\"\n</bug_code>\n<dialogue>\nTeacher: How can you modify the condition in your if statement to correctly handle the case when the temperature is exactly 0 in Celsius?\n</dialogue>"
        },
        "22_53_cookie_purchase": {
            "solution": "On line 4, the function checks if the quotient `cookies` and 10 is 0 instead of checking whether `cookies` is a multiple of 10.On line 4, replace `/` with `%` and on line 4.",
            "least": "<problem>\nWrite a function `cookiePurchase(cookies: float) -> dict` that takes in the number of cookies a customer wants to purchase and returns a dictionary with the total price of the cookies and the discount that the customer will receive. The price of a cookie is $1.75. If the customer purchases more than 10 cookies and the number of cookies is a multiple of 10, then the customer will receive a 10% discount. The function should return a dictionary with the keys `price` and `discount`. The `discount` key should map to the amount of the discount and the `price` key should map to the total price of the cookies after the discount is applied. Assume that the customer will always purchase a positive number of cookies.\n## Example Cases:\n```\ncookiePurchase(2) => {'discount': 0.0, 'price': 3.5}\ncookiePurchase(70) => {'discount': 12.25, 'price': 110.25}\ncookiePurchase(22) => {'discount': 0.0, 'price': 38.5}\ncookiePurchase(10) => {'discount': 0.0, 'price': 17.5}\ncookiePurchase(20) => {'discount': 3.5, 'price': 31.5}\n```\n</problem>\n<bug_code>\n1. def cookiePurchase(cookies):\n2.    price = cookies * 1.75\n3.    discount = 0\n4.    if cookies > 10 and cookies / 10 == 0:\n5.        discount = price * 0.1\n6.        price = price - discount\n7.    return {\"discount\": discount, \"price\": price}\n</bug_code>\n<dialogue>\nTeacher: Hm... Are you sure that dividing by 10 is the right way to check whether a number is a multiple of 10?\n</dialogue>",
            "more": "<problem>\nWrite a function `cookiePurchase(cookies: float) -> dict` that takes in the number of cookies a customer wants to purchase and returns a dictionary with the total price of the cookies and the discount that the customer will receive. The price of a cookie is $1.75. If the customer purchases more than 10 cookies and the number of cookies is a multiple of 10, then the customer will receive a 10% discount. The function should return a dictionary with the keys `price` and `discount`. The `discount` key should map to the amount of the discount and the `price` key should map to the total price of the cookies after the discount is applied. Assume that the customer will always purchase a positive number of cookies.\n## Example Cases:\n```\ncookiePurchase(2) => {'discount': 0.0, 'price': 3.5}\ncookiePurchase(70) => {'discount': 12.25, 'price': 110.25}\ncookiePurchase(22) => {'discount': 0.0, 'price': 38.5}\ncookiePurchase(10) => {'discount': 0.0, 'price': 17.5}\ncookiePurchase(20) => {'discount': 3.5, 'price': 31.5}\n```\n</problem>\n<bug_code>\n1. def cookiePurchase(cookies):\n2.    price = cookies * 1.75\n3.    discount = 0\n4.    if cookies > 10 and cookies / 10 == 0:\n5.        discount = price * 0.1\n6.        price = price - discount\n7.    return {\"discount\": discount, \"price\": price}\n</bug_code>\n<dialogue>\nTeacher: What operator should you use to check whether a number is a multiple of 10?\n</dialogue>",
            "most": "<problem>\nWrite a function `cookiePurchase(cookies: float) -> dict` that takes in the number of cookies a customer wants to purchase and returns a dictionary with the total price of the cookies and the discount that the customer will receive. The price of a cookie is $1.75. If the customer purchases more than 10 cookies and the number of cookies is a multiple of 10, then the customer will receive a 10% discount. The function should return a dictionary with the keys `price` and `discount`. The `discount` key should map to the amount of the discount and the `price` key should map to the total price of the cookies after the discount is applied. Assume that the customer will always purchase a positive number of cookies.\n## Example Cases:\n```\ncookiePurchase(2) => {'discount': 0.0, 'price': 3.5}\ncookiePurchase(70) => {'discount': 12.25, 'price': 110.25}\ncookiePurchase(22) => {'discount': 0.0, 'price': 38.5}\ncookiePurchase(10) => {'discount': 0.0, 'price': 17.5}\ncookiePurchase(20) => {'discount': 3.5, 'price': 31.5}\n```\n</problem>\n<bug_code>\n1. def cookiePurchase(cookies):\n2.    price = cookies * 1.75\n3.    discount = 0\n4.    if cookies > 10 and cookies / 10 == 0:\n5.        discount = price * 0.1\n6.        price = price - discount\n7.    return {\"discount\": discount, \"price\": price}\n</bug_code>\n<dialogue>\nTeacher: Could the problem be with the operator you used to check if cookies is a multiple of 10?\n</dialogue>"
        },
        "24_29_factorial_socratic": {
            "solution": "On line 6, `fact` is multiplied with 0 in the first iteration of the for loop. Consequently, at every iteration fact stays equal with 0 instead of being updated to be equal with factorial of `(i + 1)`. Therefore, the function will return 0, irrespective of nReplace `i` with `(i + 1)` in line 6.Replace `range(n)` with `range(1, n + 1)` in line 5.",
            "least": "<problem>\nWrite a function `factorial(n:int) -> int` that computes the factorial n! of a natural number n, which is defined mathematically as:\n\n$0! = 1$\n$n! = n \\times (n - 1)!$\n\nAdditionally, if the input integer n is negative the function should return 0.\n\n## Example Cases:\n```\nfactorial(-1) => 0\nfactorial(0) => 1\nfactorial(1) => 1\nfactorial(2) => 2\nfactorial(3) => 6\nfactorial(4) => 24\nfactorial(5) => 120\n```\n</problem>\n<bug_code>\n1. def factorial(n):\n2.        if n < 0:\n3.                return 0\n4.        fact = 1\n5.        for i in range(n):\n6.                fact = fact * i\n7.        return fact\n</bug_code>\n<dialogue>\nTeacher: Let\u2019s see what happens when `n` is 1. What is the first value that is assigned to variable `i` in line 5?\n</dialogue>",
            "more": "<problem>\nWrite a function `factorial(n:int) -> int` that computes the factorial n! of a natural number n, which is defined mathematically as:\n\n$0! = 1$\n$n! = n \\times (n - 1)!$\n\nAdditionally, if the input integer n is negative the function should return 0.\n\n## Example Cases:\n```\nfactorial(-1) => 0\nfactorial(0) => 1\nfactorial(1) => 1\nfactorial(2) => 2\nfactorial(3) => 6\nfactorial(4) => 24\nfactorial(5) => 120\n```\n</problem>\n<bug_code>\n1. def factorial(n):\n2.        if n < 0:\n3.                return 0\n4.        fact = 1\n5.        for i in range(n):\n6.                fact = fact * i\n7.        return fact\n</bug_code>\n<dialogue>\nTeacher: Can you tell me what `range(n)` does?\n</dialogue>",
            "most": "<problem>\nWrite a function `factorial(n:int) -> int` that computes the factorial n! of a natural number n, which is defined mathematically as:\n\n$0! = 1$\n$n! = n \\times (n - 1)!$\n\nAdditionally, if the input integer n is negative the function should return 0.\n\n## Example Cases:\n```\nfactorial(-1) => 0\nfactorial(0) => 1\nfactorial(1) => 1\nfactorial(2) => 2\nfactorial(3) => 6\nfactorial(4) => 24\nfactorial(5) => 120\n```\n</problem>\n<bug_code>\n1. def factorial(n):\n2.        if n < 0:\n3.                return 0\n4.        fact = 1\n5.        for i in range(n):\n6.                fact = fact * i\n7.        return fact\n</bug_code>\n<dialogue>\nTeacher: Does `range(n)` start with 0 or 1?\n</dialogue>"
        },
        "25_55_insert_to_linked_list": {
            "solution": "The function returns an incomplete linked list when inserting an element in a linked list. For example, upon inserting `5`, after `2` in the list: 1->2->3->4 , the returned list is 1->2->5 instead of 1->2->5->3->4.After line 10, insert a line `new_node.next = curr_head.next`",
            "least": "<problem>\nWrite a function `insert_after(head: Node, prev_data: int, new_data: int) -> None` that takes in the head of a linked list, the data of a node in the linked list, and some new data. The function should insert a new node with the new data after the node with the `prev_data`. If the `prev_data` is not in the linked list, the function should do nothing. The function should return None. Note that the function should modify the linked list in place.\nYou are provided with a `Node` class that has a `data` attribute and a `next` attribute. The `next` attribute points to the next node in the linked list. The `head` of the linked list is the first node in the linked list.\nclass Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n```\n## Example Cases:\n```py\nhead = Node(data=1)\nhead.next = Node(data=2)\nhead.next.next = Node(data=3)\nhead.next.next.next = Node(data=4)\ninsert_after(head, 2, 5) => None\nhead.data == 1\nhead.next.data == 2\nhead.next.next.data == 5\nhead.next.next.next.data == 3\nhead.next.next.next.next.data == 4\ninsert_after(head, 8, 6) => \"Previous node is not in linked list\"\n```\n</problem>\n<bug_code>\n1. class Node:\n2.    def __init__(self, data=None, next=None):\n3.        self.data = data\n4.        self.next = next\n5.\n6. def insert_after(head, prev_data, new_data):\n7.    curr_head = head\n8.    while curr_head is not None:\n9.        if curr_head.data == prev_data:\n10.            new_node = Node(data=new_data)\n11.            curr_head.next = new_node\n12.            return\n13.        else:\n14.            curr_head = curr_head.next\n15.    \n16.    return \"Previous node is not in linked list\"\n</bug_code>\n<dialogue>\nTeacher: Great job! Let's now look at what happens in `insert_after` in your code. Can you track execution line-by-line?\n</dialogue>",
            "more": "<problem>\nWrite a function `insert_after(head: Node, prev_data: int, new_data: int) -> None` that takes in the head of a linked list, the data of a node in the linked list, and some new data. The function should insert a new node with the new data after the node with the `prev_data`. If the `prev_data` is not in the linked list, the function should do nothing. The function should return None. Note that the function should modify the linked list in place.\nYou are provided with a `Node` class that has a `data` attribute and a `next` attribute. The `next` attribute points to the next node in the linked list. The `head` of the linked list is the first node in the linked list.\nclass Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n```\n## Example Cases:\n```py\nhead = Node(data=1)\nhead.next = Node(data=2)\nhead.next.next = Node(data=3)\nhead.next.next.next = Node(data=4)\ninsert_after(head, 2, 5) => None\nhead.data == 1\nhead.next.data == 2\nhead.next.next.data == 5\nhead.next.next.next.data == 3\nhead.next.next.next.next.data == 4\ninsert_after(head, 8, 6) => \"Previous node is not in linked list\"\n```\n</problem>\n<bug_code>\n1. class Node:\n2.    def __init__(self, data=None, next=None):\n3.        self.data = data\n4.        self.next = next\n5.\n6. def insert_after(head, prev_data, new_data):\n7.    curr_head = head\n8.    while curr_head is not None:\n9.        if curr_head.data == prev_data:\n10.            new_node = Node(data=new_data)\n11.            curr_head.next = new_node\n12.            return\n13.        else:\n14.            curr_head = curr_head.next\n15.    \n16.    return \"Previous node is not in linked list\"\n</bug_code>\n<dialogue>\nTeacher: Could you explain what is happening in the while loop of your \u2018insert_after()\u2019 function implementation keeping this in mind?\n</dialogue>",
            "most": "<problem>\nWrite a function `insert_after(head: Node, prev_data: int, new_data: int) -> None` that takes in the head of a linked list, the data of a node in the linked list, and some new data. The function should insert a new node with the new data after the node with the `prev_data`. If the `prev_data` is not in the linked list, the function should do nothing. The function should return None. Note that the function should modify the linked list in place.\nYou are provided with a `Node` class that has a `data` attribute and a `next` attribute. The `next` attribute points to the next node in the linked list. The `head` of the linked list is the first node in the linked list.\nclass Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n```\n## Example Cases:\n```py\nhead = Node(data=1)\nhead.next = Node(data=2)\nhead.next.next = Node(data=3)\nhead.next.next.next = Node(data=4)\ninsert_after(head, 2, 5) => None\nhead.data == 1\nhead.next.data == 2\nhead.next.next.data == 5\nhead.next.next.next.data == 3\nhead.next.next.next.next.data == 4\ninsert_after(head, 8, 6) => \"Previous node is not in linked list\"\n```\n</problem>\n<bug_code>\n1. class Node:\n2.    def __init__(self, data=None, next=None):\n3.        self.data = data\n4.        self.next = next\n5.\n6. def insert_after(head, prev_data, new_data):\n7.    curr_head = head\n8.    while curr_head is not None:\n9.        if curr_head.data == prev_data:\n10.            new_node = Node(data=new_data)\n11.            curr_head.next = new_node\n12.            return\n13.        else:\n14.            curr_head = curr_head.next\n15.    \n16.    return \"Previous node is not in linked list\"\n</bug_code>\n<dialogue>\nTeacher: Are you correctly linking the new node to the node after the previous node in your code?\n</dialogue>"
        },
        "2_18_splitting_cookies": {
            "solution": "On line 5, `newCookies` computes the maximum subset of cookies that can be split evenly among the people, which are less than the given number of cookies. However, the problem description asks for more cookies to be purchased, so the total number of cookies that is returned should be larger than the given number of cookies.Replace line 5 with `purchasedCookies = people - cookies % people` an then insert a line after that containing `newCookies = cookies + purchasedCookies`.Replace `cookies - (cookies % people)` with `people - cookies % people + cookies` on line 5.Remove line 5. Add then insert the following lines in its place`leftOverCookies = cookies % people` and  `newCookies = people - leftOverCookies + cookies`.",
            "least": "<problem>\nWrite a method `split(cookies:int, people:int) -> Tuple[int,int, str]` that takes in a number of cookies and a number of people. The function should find if the cookies can be split evenly amongst all people. If so, return a `Tuple` containing how many cookies each person will get and the number of leftover cookies, which is `0` and a string saying \"Cookies can be split evenly!\". If the cookies cannot be split evenly, then calculate the minimum number of cookies that need to be purchased to split the cookies evenly. The function should return the total number of cookies after the purchase, how many cookies each person will get then, and a string saying \"Cookies cannot be split evenly. Bought more cookies.\" Assume that `people` and `cookies` are positive integers.\n\n## Example Cases:\n```\nsplit(10, 2) => (5, 0, \"Cookies can be split evenly!\")\nsplit(10, 3) => (12, 4, \"Cookies cannot be split evenly. Bought more cookies.\")\nsplit(20, 4) => (5, 0, \"Cookies can be split evenly!\")\nsplit(10, 5) => (2, 0, \"Cookies can be split evenly!\")\nsplit(25, 10) => (30, 3, \"Cookies cannot be split evenly. Bought more cookies.\")\n```\n</problem>\n<bug_code>\n1. def split (cookies, people):\n2.  if cookies % people == 0:\n3.    return (cookies // people, 0, \"Cookies can be split evenly!\")\n4.  else:\n5.    newCookies = cookies - (cookies % people)\n6.    return (newCookies, newCookies // people, \"Cookies cannot be split evenly. Bought more cookies.\")\n</bug_code>\n<dialogue>\nTeacher: Let's look into what's going on. What happens when you try to run the sample test cases `split(10, 2)` and `split(10, 3)`?\n</dialogue>",
            "more": "<problem>\nWrite a method `split(cookies:int, people:int) -> Tuple[int,int, str]` that takes in a number of cookies and a number of people. The function should find if the cookies can be split evenly amongst all people. If so, return a `Tuple` containing how many cookies each person will get and the number of leftover cookies, which is `0` and a string saying \"Cookies can be split evenly!\". If the cookies cannot be split evenly, then calculate the minimum number of cookies that need to be purchased to split the cookies evenly. The function should return the total number of cookies after the purchase, how many cookies each person will get then, and a string saying \"Cookies cannot be split evenly. Bought more cookies.\" Assume that `people` and `cookies` are positive integers.\n\n## Example Cases:\n```\nsplit(10, 2) => (5, 0, \"Cookies can be split evenly!\")\nsplit(10, 3) => (12, 4, \"Cookies cannot be split evenly. Bought more cookies.\")\nsplit(20, 4) => (5, 0, \"Cookies can be split evenly!\")\nsplit(10, 5) => (2, 0, \"Cookies can be split evenly!\")\nsplit(25, 10) => (30, 3, \"Cookies cannot be split evenly. Bought more cookies.\")\n```\n</problem>\n<bug_code>\n1. def split (cookies, people):\n2.  if cookies % people == 0:\n3.    return (cookies // people, 0, \"Cookies can be split evenly!\")\n4.  else:\n5.    newCookies = cookies - (cookies % people)\n6.    return (newCookies, newCookies // people, \"Cookies cannot be split evenly. Bought more cookies.\")\n</bug_code>\n<dialogue>\nTeacher: Let's look at one of the test examples. If we can only assign whole cookies to each person, then in which case would we need to buy more cookies?\n</dialogue>",
            "most": "<problem>\nWrite a method `split(cookies:int, people:int) -> Tuple[int,int, str]` that takes in a number of cookies and a number of people. The function should find if the cookies can be split evenly amongst all people. If so, return a `Tuple` containing how many cookies each person will get and the number of leftover cookies, which is `0` and a string saying \"Cookies can be split evenly!\". If the cookies cannot be split evenly, then calculate the minimum number of cookies that need to be purchased to split the cookies evenly. The function should return the total number of cookies after the purchase, how many cookies each person will get then, and a string saying \"Cookies cannot be split evenly. Bought more cookies.\" Assume that `people` and `cookies` are positive integers.\n\n## Example Cases:\n```\nsplit(10, 2) => (5, 0, \"Cookies can be split evenly!\")\nsplit(10, 3) => (12, 4, \"Cookies cannot be split evenly. Bought more cookies.\")\nsplit(20, 4) => (5, 0, \"Cookies can be split evenly!\")\nsplit(10, 5) => (2, 0, \"Cookies can be split evenly!\")\nsplit(25, 10) => (30, 3, \"Cookies cannot be split evenly. Bought more cookies.\")\n```\n</problem>\n<bug_code>\n1. def split (cookies, people):\n2.  if cookies % people == 0:\n3.    return (cookies // people, 0, \"Cookies can be split evenly!\")\n4.  else:\n5.    newCookies = cookies - (cookies % people)\n6.    return (newCookies, newCookies // people, \"Cookies cannot be split evenly. Bought more cookies.\")\n</bug_code>\n<dialogue>\nTeacher: Are you calculating the newCookies correctly in the case when cookies cannot be split evenly among the people?\n</dialogue>"
        },
        "3_20_counting_down": {
            "solution": "On lines 5 and 10, there is an off by one error. The while loop ranges are inclusive of `start` but exclusive of `end`. Consequently, the function returns a list that includes all the numbers from `start` to `end - 1` instead of `end`.Replace `>` with `>=` on line 5 and `<` with `<=` on line 10.",
            "least": "<problem>\nCreate a method `sequenceBetween(start: int, end: int) -> List[int]` that takes two positive integers and returns a list of all the numbers between the integers, including the start and end values. You begin counting from `start`, and end counting on `end`. If `start` is smaller than `end`, then you perform a \"countup\" operation where you return a list of the numbers from the smaller number to the bigger number. If the user enters a bigger number as `start` you perform a \"countdown\" operation where you return a list of all the numbers from the bigger number to the smaller number.\n## Example Cases:\n```\nsequenceBetween(0, 3) => [0, 1, 2, 3]\nsequenceBetween(1, 1) => [1]\nsequenceBetween(7, 5) => [7, 6, 5]\nsequenceBetween(100, 95) => [100, 99, 98, 97, 96, 95]\nsequenceBetween(12, 10) => [12, 11, 10]\nsequenceBetween(14, 20) => [14, 15, 16, 17, 18, 19, 20]\n```\n</problem>\n<bug_code>\n1. def sequenceBetween(start, end):\n2.    l = []\n3.    if(start >= end):\n4.        i = start \n5.        while i > end:\n6.            l.append(i)\n7.            i -= 1\n8.    else:\n9.        i = start\n10.        while i < end:\n11.            l.append(i)\n12.            i += 1\n13.    \n14.    return l\n</bug_code>\n<dialogue>\nTeacher: Sure, let's walk through your code. When you provide the first test input `sequenceBetween(0, 3)` what are the values in your output list `l`?\n</dialogue>",
            "more": "<problem>\nCreate a method `sequenceBetween(start: int, end: int) -> List[int]` that takes two positive integers and returns a list of all the numbers between the integers, including the start and end values. You begin counting from `start`, and end counting on `end`. If `start` is smaller than `end`, then you perform a \"countup\" operation where you return a list of the numbers from the smaller number to the bigger number. If the user enters a bigger number as `start` you perform a \"countdown\" operation where you return a list of all the numbers from the bigger number to the smaller number.\n## Example Cases:\n```\nsequenceBetween(0, 3) => [0, 1, 2, 3]\nsequenceBetween(1, 1) => [1]\nsequenceBetween(7, 5) => [7, 6, 5]\nsequenceBetween(100, 95) => [100, 99, 98, 97, 96, 95]\nsequenceBetween(12, 10) => [12, 11, 10]\nsequenceBetween(14, 20) => [14, 15, 16, 17, 18, 19, 20]\n```\n</problem>\n<bug_code>\n1. def sequenceBetween(start, end):\n2.    l = []\n3.    if(start >= end):\n4.        i = start \n5.        while i > end:\n6.            l.append(i)\n7.            i -= 1\n8.    else:\n9.        i = start\n10.        while i < end:\n11.            l.append(i)\n12.            i += 1\n13.    \n14.    return l\n</bug_code>\n<dialogue>\nTeacher: Can you tell me what happens when you enter `(0, 3)`as the input? Which lines execute and what is stored in the variables?\n</dialogue>",
            "most": "<problem>\nCreate a method `sequenceBetween(start: int, end: int) -> List[int]` that takes two positive integers and returns a list of all the numbers between the integers, including the start and end values. You begin counting from `start`, and end counting on `end`. If `start` is smaller than `end`, then you perform a \"countup\" operation where you return a list of the numbers from the smaller number to the bigger number. If the user enters a bigger number as `start` you perform a \"countdown\" operation where you return a list of all the numbers from the bigger number to the smaller number.\n## Example Cases:\n```\nsequenceBetween(0, 3) => [0, 1, 2, 3]\nsequenceBetween(1, 1) => [1]\nsequenceBetween(7, 5) => [7, 6, 5]\nsequenceBetween(100, 95) => [100, 99, 98, 97, 96, 95]\nsequenceBetween(12, 10) => [12, 11, 10]\nsequenceBetween(14, 20) => [14, 15, 16, 17, 18, 19, 20]\n```\n</problem>\n<bug_code>\n1. def sequenceBetween(start, end):\n2.    l = []\n3.    if(start >= end):\n4.        i = start \n5.        while i > end:\n6.            l.append(i)\n7.            i -= 1\n8.    else:\n9.        i = start\n10.        while i < end:\n11.            l.append(i)\n12.            i += 1\n13.    \n14.    return l\n</bug_code>\n<dialogue>\nTeacher: Do you notice that the end value is not included in your output list because of the condition in your while loop?\n</dialogue>"
        },
        "4_22_removing_even_number": {
            "solution": "There is a syntax error on line 4. The operator used for \"not equal to\" is incorrect.Replace `=!` with `!=` on line 4.",
            "least": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums:\n4.    if i % 2 =! 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: It might be an issue with your operator. Could you list all the comparison operators you know?\n</dialogue>",
            "more": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums:\n4.    if i % 2 =! 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: Is the error message highlighting a specific portion of the line like an operator or a parenthesis?\n</dialogue>",
            "most": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums:\n4.    if i % 2 =! 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: Did you use the correct operator for not equal to?\n</dialogue>"
        },
        "4_23_removing_even_numer": {
            "solution": "On line 4, the function checks if `i` divided by `2` is not equal to `0` which is true for `i > 0 and i < 0`. Consequently, the function removes all elements equal to `0` in `nums` instead of removing all elements that are divisible by `2`.Replace `/` with `%` on line 4.",
            "least": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums:\n4.    if i / 2 != 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: Can you explain what your if-statement on line 4 is doing? Let's assume `i` is 4.\n</dialogue>",
            "more": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums:\n4.    if i / 2 != 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: Let's review the Python documentation for arithmetic operations. Are you using the right operator to check if a number is even?\n</dialogue>",
            "most": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums:\n4.    if i / 2 != 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: How can you modify the code to use the modulo operator instead of the division operator?\n</dialogue>"
        },
        "4_25_removing_even_numer": {
            "solution": "There is a syntax error on line 6. The return statement is not within a function scope.Insert a tab indentation before `return newNums` on line 6.",
            "least": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.    newNums = []\n3.    for i in nums:\n4.        if i % 2 != 0:\n5.            newNums.append(i)\n6. return newNums\n</bug_code>\n<dialogue>\nTeacher: Let's warm up by thinking about what the \"scope\" of a code block means. Do you know what that is?\n</dialogue>",
            "more": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.    newNums = []\n3.    for i in nums:\n4.        if i % 2 != 0:\n5.            newNums.append(i)\n6. return newNums\n</bug_code>\n<dialogue>\nTeacher: Sure, let's look at the error together. Do you know what the error \"SyntaxError: 'return' outside function\" means?\n</dialogue>",
            "most": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.    newNums = []\n3.    for i in nums:\n4.        if i % 2 != 0:\n5.            newNums.append(i)\n6. return newNums\n</bug_code>\n<dialogue>\nTeacher: What might you need to do to make sure the return statement is in the scope of your function?\n</dialogue>"
        },
        "4_26_removing_even_numbers": {
            "solution": "On line 6, the function returns the array `newNums` after the first iteration of the for loop. Consequently, the function returns `newNums` containing up to 1 odd value from `nums` instead of returning `newNums` containing all the odd values in `nums`.Remove a tab indentation before `return newNums` on line 6.",
            "least": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.    newNums = []\n3.    for i in nums:\n4.        if i % 2 != 0:\n5.            newNums.append(i)\n6.        return newNums\n</bug_code>\n<dialogue>\nTeacher: What do you think might cause your function to return a list with one element instead of multiple elements?\n</dialogue>",
            "more": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.    newNums = []\n3.    for i in nums:\n4.        if i % 2 != 0:\n5.            newNums.append(i)\n6.        return newNums\n</bug_code>\n<dialogue>\nTeacher: Look at line 3, is it iterating through the whole list?\n</dialogue>",
            "most": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 3, 5, 7, 9]\nreturnOdd([2, 4, 6, 8, 10]) => []\nreturnOdd([1, 3, 5, 7, 9]) => [1, 3, 5, 7, 9]\nreturnOdd([-76, -92, 9, -1, 7, 10]) => [9, -1, 7]\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.    newNums = []\n3.    for i in nums:\n4.        if i % 2 != 0:\n5.            newNums.append(i)\n6.        return newNums\n</bug_code>\n<dialogue>\nTeacher: Can you try moving the return statement outside of the for loop?\n</dialogue>"
        },
        "4_28_removing_even_numbers": {
            "solution": "There is a syntax error on line 3. The for loop syntax is incorrect.Add `:` after `nums` on line 3.",
            "least": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1,2,3,4,5,6,7,8,9]) => [1,3,5,7,9]\nreturnOdd([2,4,6,8,10]) => []\nreturnOdd([1,3,5,7,9]) => [1,3,5,7,9]\nreturnOdd([-10,-8,-6,-4,-2,0,2,4,6,8,10]) => []\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums\n4.    if i % 2 != 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: Hi, Sure! It looks like your program has a syntax error, do you know what that means?\n</dialogue>",
            "more": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1,2,3,4,5,6,7,8,9]) => [1,3,5,7,9]\nreturnOdd([2,4,6,8,10]) => []\nreturnOdd([1,3,5,7,9]) => [1,3,5,7,9]\nreturnOdd([-10,-8,-6,-4,-2,0,2,4,6,8,10]) => []\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums\n4.    if i % 2 != 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: Hi, Sure! Do you know why it is throwing a syntax error on line 3?\n</dialogue>",
            "most": "<problem>\nCreate a method `returnOdd(nums:List[int]) -> List[int]` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.\n\n## Example Cases:\n```\nreturnOdd([1,2,3,4,5,6,7,8,9]) => [1,3,5,7,9]\nreturnOdd([2,4,6,8,10]) => []\nreturnOdd([1,3,5,7,9]) => [1,3,5,7,9]\nreturnOdd([-10,-8,-6,-4,-2,0,2,4,6,8,10]) => []\n```\n</problem>\n<bug_code>\n1. def returnOdd(nums):\n2.  newNums = []\n3.  for i in nums\n4.    if i % 2 != 0:\n5.      newNums.append(i)\n6.  return newNums\n</bug_code>\n<dialogue>\nTeacher: How can you modify the for loop on line 3 to correct the syntax?\n</dialogue>"
        },
        "56_15_compute_average": {
            "solution": "On line 2, using operator precedence rules the function first computes the quotient of `y/2` and then the sum of `x` and `y/2`. Consequently, the function does not return the average of x and y which is `x + y` that is then divided by 2.Replace `x + y` with `(x + y)` on line 2.",
            "least": "<problem>\nWrite a function `calculate_average(x: float, y: float) -> float` that takes in two integers `x` and `y` and returns their average as a float.\n## Example Cases:\n```\ncalculate_average(0, 0) => 0.0\ncalculate_average(1, 3) => 2.0\ncalculate_average(-1, 1) => 0.0\ncalculate_average(-5, -2) => -3.5\ncalculate_average(5.5, 7.5) => 6.5\ncalculate_average(405, 135) => 270.0\n```\n</problem>\n<bug_code>\n1. def calculate_average(x, y):\n2.    return x + y / 2\n</bug_code>\n<dialogue>\nTeacher: Why do you think it returns 4 instead of 3?\n</dialogue>",
            "more": "<problem>\nWrite a function `calculate_average(x: float, y: float) -> float` that takes in two integers `x` and `y` and returns their average as a float.\n## Example Cases:\n```\ncalculate_average(0, 0) => 0.0\ncalculate_average(1, 3) => 2.0\ncalculate_average(-1, 1) => 0.0\ncalculate_average(-5, -2) => -3.5\ncalculate_average(5.5, 7.5) => 6.5\ncalculate_average(405, 135) => 270.0\n```\n</problem>\n<bug_code>\n1. def calculate_average(x, y):\n2.    return x + y / 2\n</bug_code>\n<dialogue>\nTeacher: Can you describe what line 2 is doing when `x` is 2 and `y` is 4?\n</dialogue>",
            "most": "<problem>\nWrite a function `calculate_average(x: float, y: float) -> float` that takes in two integers `x` and `y` and returns their average as a float.\n## Example Cases:\n```\ncalculate_average(0, 0) => 0.0\ncalculate_average(1, 3) => 2.0\ncalculate_average(-1, 1) => 0.0\ncalculate_average(-5, -2) => -3.5\ncalculate_average(5.5, 7.5) => 6.5\ncalculate_average(405, 135) => 270.0\n```\n</problem>\n<bug_code>\n1. def calculate_average(x, y):\n2.    return x + y / 2\n</bug_code>\n<dialogue>\nTeacher: Have you considered adding brackets around x + y on line 2?\n</dialogue>"
        },
        "58_58_splitting_apples": {
            "solution": "The function returns a float instead of the largest possible integer after distributing the apples evenly. Replace `/` with `//` on line 2.",
            "least": "<problem>\nWrite a method `split_apples(apples:int, children:int) ->int` that takes in an amount of apples and a number of children. The function should distribute `apples` evenly across all `children`. The function should return the whole number of apples each child will get after distributing the apples evenly. Assume that both `apples` and `children` are positive whole numbers.\n## Example Cases:\n```\nsplit_apples(10, 2) => 5\nsplit_apples(7, 2) => 3\nsplit_apples(100, 100) => 1\nsplit_apples(1, 2) => 0\n```\n</problem>\n<bug_code>\n1. def split_apples(apples, children):\n2.    return apples / children\n</bug_code>\n<dialogue>\nTeacher: Is there a way you can see what the result is?\n</dialogue>",
            "more": "<problem>\nWrite a method `split_apples(apples:int, children:int) ->int` that takes in an amount of apples and a number of children. The function should distribute `apples` evenly across all `children`. The function should return the whole number of apples each child will get after distributing the apples evenly. Assume that both `apples` and `children` are positive whole numbers.\n## Example Cases:\n```\nsplit_apples(10, 2) => 5\nsplit_apples(7, 2) => 3\nsplit_apples(100, 100) => 1\nsplit_apples(1, 2) => 0\n```\n</problem>\n<bug_code>\n1. def split_apples(apples, children):\n2.    return apples / children\n</bug_code>\n<dialogue>\nTeacher: Think about division in Python, what does `/` indicate?\n</dialogue>",
            "most": "<problem>\nWrite a method `split_apples(apples:int, children:int) ->int` that takes in an amount of apples and a number of children. The function should distribute `apples` evenly across all `children`. The function should return the whole number of apples each child will get after distributing the apples evenly. Assume that both `apples` and `children` are positive whole numbers.\n## Example Cases:\n```\nsplit_apples(10, 2) => 5\nsplit_apples(7, 2) => 3\nsplit_apples(100, 100) => 1\nsplit_apples(1, 2) => 0\n```\n</problem>\n<bug_code>\n1. def split_apples(apples, children):\n2.    return apples / children\n</bug_code>\n<dialogue>\nTeacher: Do you know the difference between the division operator `/` and the floor division operator `//` in Python?\n</dialogue>"
        },
        "58_59_splitting_apples": {
            "solution": "The while loop exits early when `apples` are divisible by `children`. Consequently, the function has an off-by-one error when `apples` is divisible by `children`.Replace `apples > children` with `apples >= children` on line 3.",
            "least": "<problem>\nWrite a method `split_apples(apples:int, children:int) ->int` that takes in an amount of apples and a number of children. The function should distribute `apples` evenly across all `children`. The function should return the whole number of apples each child will get after distributing the apples evenly. Assume that both `apples` and `children` are positive whole numbers.\n## Example Cases:\n```\nsplit_apples(10, 2) => 5\nsplit_apples(7, 2) => 3\nsplit_apples(100, 100) => 1\nsplit_apples(1, 2) => 0\n```\n</problem>\n<bug_code>\n1. def split_apples(apples, children):\n2.    i = 0\n3.    while apples > 0 and apples > children:\n4.        apples = apples - children\n5.        i += 1\n6.    return i\n</bug_code>\n<dialogue>\nTeacher: Sure. Can you explain your code to me, what is supposed to do, line by line?\n</dialogue>",
            "more": "<problem>\nWrite a method `split_apples(apples:int, children:int) ->int` that takes in an amount of apples and a number of children. The function should distribute `apples` evenly across all `children`. The function should return the whole number of apples each child will get after distributing the apples evenly. Assume that both `apples` and `children` are positive whole numbers.\n## Example Cases:\n```\nsplit_apples(10, 2) => 5\nsplit_apples(7, 2) => 3\nsplit_apples(100, 100) => 1\nsplit_apples(1, 2) => 0\n```\n</problem>\n<bug_code>\n1. def split_apples(apples, children):\n2.    i = 0\n3.    while apples > 0 and apples > children:\n4.        apples = apples - children\n5.        i += 1\n6.    return i\n</bug_code>\n<dialogue>\nTeacher: Sure. Can you tell me what the loop condition `apples > children` is there for?\n</dialogue>",
            "most": "<problem>\nWrite a method `split_apples(apples:int, children:int) ->int` that takes in an amount of apples and a number of children. The function should distribute `apples` evenly across all `children`. The function should return the whole number of apples each child will get after distributing the apples evenly. Assume that both `apples` and `children` are positive whole numbers.\n## Example Cases:\n```\nsplit_apples(10, 2) => 5\nsplit_apples(7, 2) => 3\nsplit_apples(100, 100) => 1\nsplit_apples(1, 2) => 0\n```\n</problem>\n<bug_code>\n1. def split_apples(apples, children):\n2.    i = 0\n3.    while apples > 0 and apples > children:\n4.        apples = apples - children\n5.        i += 1\n6.    return i\n</bug_code>\n<dialogue>\nTeacher: How can you change the condition of your while loop to ensure it does not exit early when apples are divisible by children?\n</dialogue>"
        },
        "59_60_product": {
            "solution": "The function does not return anything, thus when evaluated it computes the value `None` instead of returning the product.Add `return` before `a * b`.",
            "least": "<problem>\nDefine a function called `Product(a:int, b:int) -> int` which takes two integer inputs: a and b. The function should return the product of these two values (i.e. a * b).\n## Example Cases: \n```\nProduct(1,2) => 2\nProduct(2,4) => 8\nProduct(4,4) => 16\nProduct(5,5) => 25\n```\n</problem>\n<bug_code>\n1. def Product(a, b):\n2.\ta * b\n</bug_code>\n<dialogue>\nTeacher: Are you familiar with a way to output the value of `Product(1,2)` to the user through the console?\n</dialogue>",
            "more": "<problem>\nDefine a function called `Product(a:int, b:int) -> int` which takes two integer inputs: a and b. The function should return the product of these two values (i.e. a * b).\n## Example Cases: \n```\nProduct(1,2) => 2\nProduct(2,4) => 8\nProduct(4,4) => 16\nProduct(5,5) => 25\n```\n</problem>\n<bug_code>\n1. def Product(a, b):\n2.\ta * b\n</bug_code>\n<dialogue>\nTeacher: A function will only take on a value when the keyword `return` is used followed by a value. Otherwise, it will return a special value referred to by `None`, stating that the function did not return any value. Do you know where to put `return` in your code?\n</dialogue>",
            "most": "<problem>\nDefine a function called `Product(a:int, b:int) -> int` which takes two integer inputs: a and b. The function should return the product of these two values (i.e. a * b).\n## Example Cases: \n```\nProduct(1,2) => 2\nProduct(2,4) => 8\nProduct(4,4) => 16\nProduct(5,5) => 25\n```\n</problem>\n<bug_code>\n1. def Product(a, b):\n2.\ta * b\n</bug_code>\n<dialogue>\nTeacher: Are you forgetting to return the result of the multiplication?\n</dialogue>"
        },
        "5_30_sorted_words": {
            "solution": "The function returns a list of sorted words in alphabetical order, however, if `s` contains repeated words, the function returns all the words instead of removing the duplicated words in `s`.Replace `sorted(words)` with `sorted(set(words))` on line 3.Insert a line with `words = set(words)`  after that insert another line with `words = list(set(words))` after line 2.",
            "least": "<problem>\nWrite a function `get_words (s:str) -> List[str]` that extracts all the words from the input string `s`, changes them all to be lower case, and returns a list containing all unique words (no duplicates) in alphabetical order. Assume that a word is a maximal sequence of characters that does not contain any space. For example, `get_words(\"Hello World hello\")` should return `['hello', 'world']`.\n## Example Cases:\n```\nget_words(\"Hello World\") => ['hello', 'world']\nget_words(\"Hello World hello\") => ['hello', 'world']\nget_words(\"Hello World hello world\") => ['hello', 'world']\nget_words(\"Hello World H e l l o W o r l d\") => ['d', 'e', 'h', 'hello', 'l', 'o', 'r', 'w', 'world']\nget_words(\"Hello World el WORld\") => ['el', 'hello', 'world']\nget_words(\"A C B c b a\") => ['a', 'b', 'c']\n```\n</problem>\n<bug_code>\n1. def get_words(s):\n2.    words = [word.lower() for word in s.split(\" \")]\n3.    return sorted(words)\n</bug_code>\n<dialogue>\nTeacher: Can you walk me through your `get_words` function?\n</dialogue>",
            "more": "<problem>\nWrite a function `get_words (s:str) -> List[str]` that extracts all the words from the input string `s`, changes them all to be lower case, and returns a list containing all unique words (no duplicates) in alphabetical order. Assume that a word is a maximal sequence of characters that does not contain any space. For example, `get_words(\"Hello World hello\")` should return `['hello', 'world']`.\n## Example Cases:\n```\nget_words(\"Hello World\") => ['hello', 'world']\nget_words(\"Hello World hello\") => ['hello', 'world']\nget_words(\"Hello World hello world\") => ['hello', 'world']\nget_words(\"Hello World H e l l o W o r l d\") => ['d', 'e', 'h', 'hello', 'l', 'o', 'r', 'w', 'world']\nget_words(\"Hello World el WORld\") => ['el', 'hello', 'world']\nget_words(\"A C B c b a\") => ['a', 'b', 'c']\n```\n</problem>\n<bug_code>\n1. def get_words(s):\n2.    words = [word.lower() for word in s.split(\" \")]\n3.    return sorted(words)\n</bug_code>\n<dialogue>\nTeacher: Say you have a list of letters `['A', 'A', 'B']`. How would you remove the duplicate letters from the list and return a list of unique letters?\n</dialogue>",
            "most": "<problem>\nWrite a function `get_words (s:str) -> List[str]` that extracts all the words from the input string `s`, changes them all to be lower case, and returns a list containing all unique words (no duplicates) in alphabetical order. Assume that a word is a maximal sequence of characters that does not contain any space. For example, `get_words(\"Hello World hello\")` should return `['hello', 'world']`.\n## Example Cases:\n```\nget_words(\"Hello World\") => ['hello', 'world']\nget_words(\"Hello World hello\") => ['hello', 'world']\nget_words(\"Hello World hello world\") => ['hello', 'world']\nget_words(\"Hello World H e l l o W o r l d\") => ['d', 'e', 'h', 'hello', 'l', 'o', 'r', 'w', 'world']\nget_words(\"Hello World el WORld\") => ['el', 'hello', 'world']\nget_words(\"A C B c b a\") => ['a', 'b', 'c']\n```\n</problem>\n<bug_code>\n1. def get_words(s):\n2.    words = [word.lower() for word in s.split(\" \")]\n3.    return sorted(words)\n</bug_code>\n<dialogue>\nTeacher: How about using a set to remove duplicates from your list?\n</dialogue>"
        },
        "60_61_largest_number": {
            "solution": "When `a` and `b` are equal, `c` is returned regardless of its comparison to `a` or `b`. For example: `Largest(2,2,1)` returns 1.Change the > to >= in all the conditions.",
            "least": "<problem>\nDefine a function called `Largest(a:int, b:int, c:int) -> int` which takes three integer inputs: a, b and c. The function should return the largest of these three values.\n## Example Cases:\n```\nLargest(1,2,3) => 3\nLargest(3,2,1) => 3\nLargest(2,2,1) => 2\nLargest(1,1,1) => 1\n```\n</problem>\n<bug_code>\n1. def Largest(a, b, c):\n2.\tif(a > b and a > c):\n3.\t\treturn a\n4.\telif(b > a and b > c):\n5.\t\treturn b\n6.\telse:\n7.\t\treturn c\n</bug_code>\n<dialogue>\nTeacher: Think about a case where the first and second inputs are greater than the final input but equal to each other. Which input is the greatest input?\n</dialogue>",
            "more": "<problem>\nDefine a function called `Largest(a:int, b:int, c:int) -> int` which takes three integer inputs: a, b and c. The function should return the largest of these three values.\n## Example Cases:\n```\nLargest(1,2,3) => 3\nLargest(3,2,1) => 3\nLargest(2,2,1) => 2\nLargest(1,1,1) => 1\n```\n</problem>\n<bug_code>\n1. def Largest(a, b, c):\n2.\tif(a > b and a > c):\n3.\t\treturn a\n4.\telif(b > a and b > c):\n5.\t\treturn b\n6.\telse:\n7.\t\treturn c\n</bug_code>\n<dialogue>\nTeacher: What about when `Largest(2,2,1)` is ran? What will be returned?\n</dialogue>",
            "most": "<problem>\nDefine a function called `Largest(a:int, b:int, c:int) -> int` which takes three integer inputs: a, b and c. The function should return the largest of these three values.\n## Example Cases:\n```\nLargest(1,2,3) => 3\nLargest(3,2,1) => 3\nLargest(2,2,1) => 2\nLargest(1,1,1) => 1\n```\n</problem>\n<bug_code>\n1. def Largest(a, b, c):\n2.\tif(a > b and a > c):\n3.\t\treturn a\n4.\telif(b > a and b > c):\n5.\t\treturn b\n6.\telse:\n7.\t\treturn c\n</bug_code>\n<dialogue>\nTeacher: Could the problem be with your comparison operators being > instead of >= ?\n</dialogue>"
        },
        "61_62_is_even": {
            "solution": "The function returns True when `a + b` is not divisible by 2 instead of returning True when `a + b` is divisible by 2.Replace `1` with `0` to ensure that the sum is even.",
            "least": "<problem>\nDefine a function called `SumIsEven(a:int, b:int) -> bool` which takes two integer inputs and returns true if and only if the sum of the two values is an even number. If the sum of the input values is an odd number, then the function must return false.\n## Example Cases: \n```\nSumIsEven(1,1) => True\nSumIsEven(1,2) => False\nSumIsEven(2,2) => True\nSumIsEven(2,3) => False\n```\n</problem>\n<bug_code>\n1. def SumIsEven(a, b):\n2.\treturn (a+b) % 2 == 1\n3.\n</bug_code>\n<dialogue>\nTeacher: Okay, when `inputSum % 2` is equal to 1, what does that mean about the value of `inputSum`?\n</dialogue>",
            "more": "<problem>\nDefine a function called `SumIsEven(a:int, b:int) -> bool` which takes two integer inputs and returns true if and only if the sum of the two values is an even number. If the sum of the input values is an odd number, then the function must return false.\n## Example Cases: \n```\nSumIsEven(1,1) => True\nSumIsEven(1,2) => False\nSumIsEven(2,2) => True\nSumIsEven(2,3) => False\n```\n</problem>\n<bug_code>\n1. def SumIsEven(a, b):\n2.\treturn (a+b) % 2 == 1\n3.\n</bug_code>\n<dialogue>\nTeacher: If `inputSum` is even, what is the output of `inputSum % 2`?\n</dialogue>",
            "most": "<problem>\nDefine a function called `SumIsEven(a:int, b:int) -> bool` which takes two integer inputs and returns true if and only if the sum of the two values is an even number. If the sum of the input values is an odd number, then the function must return false.\n## Example Cases: \n```\nSumIsEven(1,1) => True\nSumIsEven(1,2) => False\nSumIsEven(2,2) => True\nSumIsEven(2,3) => False\n```\n</problem>\n<bug_code>\n1. def SumIsEven(a, b):\n2.\treturn (a+b) % 2 == 1\n3.\n</bug_code>\n<dialogue>\nTeacher: Could the problem be that your condition is checking for an odd number instead of an even number? How can you adjust the condition in your if statement to check for even numbers?\n</dialogue>"
        },
        "62_63_summing_between_integers": {
            "solution": "The function returns the sum of numbers between `low` and `high`, but excludes the upper bound `high` instead of including both ends of the range. Replace `high` with `high + 1`.",
            "least": "<problem>\nDefine a function called `SumBetween(low:int, high:int) -> int` which takes two integer inputs, low and high. This function should calculate the sum of all integers between low and high inclusive.\n## Example Cases:\n```\nSumBetween(0,1) => 1\nSumBetween(0,2) => 3\nSumBetween(1,2) => 3\nSumBetween(3,5) => 12\n```\n</problem>\n<bug_code>\n1. def SumBetween(low, high):\n2.\tnum = 0\n3.\tfor i in range(low, high):\n4.\t\tnum += i\n5.\treturn num\n</bug_code>\n<dialogue>\nTeacher: Let's approach that question from a different direction. If you wanted to include 1 as an element in the list, how would you change `range(0,1)`?\n</dialogue>",
            "more": "<problem>\nDefine a function called `SumBetween(low:int, high:int) -> int` which takes two integer inputs, low and high. This function should calculate the sum of all integers between low and high inclusive.\n## Example Cases:\n```\nSumBetween(0,1) => 1\nSumBetween(0,2) => 3\nSumBetween(1,2) => 3\nSumBetween(3,5) => 12\n```\n</problem>\n<bug_code>\n1. def SumBetween(low, high):\n2.\tnum = 0\n3.\tfor i in range(low, high):\n4.\t\tnum += i\n5.\treturn num\n</bug_code>\n<dialogue>\nTeacher: Let's abstract this a bit then. Let's say we have variables `x` and `y`, which are integers. What number is in `range(x,y+1)` that is not in `range(x,y)`?\n</dialogue>",
            "most": "<problem>\nDefine a function called `SumBetween(low:int, high:int) -> int` which takes two integer inputs, low and high. This function should calculate the sum of all integers between low and high inclusive.\n## Example Cases:\n```\nSumBetween(0,1) => 1\nSumBetween(0,2) => 3\nSumBetween(1,2) => 3\nSumBetween(3,5) => 12\n```\n</problem>\n<bug_code>\n1. def SumBetween(low, high):\n2.\tnum = 0\n3.\tfor i in range(low, high):\n4.\t\tnum += i\n5.\treturn num\n</bug_code>\n<dialogue>\nTeacher: Did you know that the `range()` function excludes the upper bound? How could this be affecting your code?\n</dialogue>"
        },
        "63_64_good_dinner": {
            "solution": "The function incorrectly returns True instead of False when it is a weekday and `pizzas` is less than 10. Insert `pizzas >= 10 and` before `pizzas <= 20 and not(weekend)` in the elif condition on line 4.",
            "least": "<problem>\nYou like to eat pizzas for dinner. A good dinner is a dinner where you eat between 10 and 20 pizzas (inclusive). Unless it is a weekend, in which case there is no upper bound on the number of pizzas. Write a function called `GoodDinner(pizzas_int, weekend:bool) -> bool` which takes two inputs: the number of pizzas you eat, and a boolean which is true if it is the weekend and false otherwise. Your function should return true if you had a good dinner, and false if you didn't.\n## Example Cases:\n```\nGoodDinner(10, False) => True\nGoodDinner(20, False) => True\nGoodDinner(5, False) => False\nGoodDinner(21, False) => False\nGoodDinner(10, True) => True\nGoodDinner(21, True) => True\nGoodDinner(5, True) => False\n```\n</problem>\n<bug_code>\n1. def GoodDinner(pizzas, weekend):\n2.        if(pizzas >= 10 and weekend):\n3.                return True\n4.        elif(pizzas <= 20 and not(weekend)):\n5.                return True\n6.        return False\n</bug_code>\n<dialogue>\nTeacher: And what logical operator would we use to connect those operations to create a boolean that is only `True` if pizzas is between 10 and 20, inclusively?\n</dialogue>",
            "more": "<problem>\nYou like to eat pizzas for dinner. A good dinner is a dinner where you eat between 10 and 20 pizzas (inclusive). Unless it is a weekend, in which case there is no upper bound on the number of pizzas. Write a function called `GoodDinner(pizzas_int, weekend:bool) -> bool` which takes two inputs: the number of pizzas you eat, and a boolean which is true if it is the weekend and false otherwise. Your function should return true if you had a good dinner, and false if you didn't.\n## Example Cases:\n```\nGoodDinner(10, False) => True\nGoodDinner(20, False) => True\nGoodDinner(5, False) => False\nGoodDinner(21, False) => False\nGoodDinner(10, True) => True\nGoodDinner(21, True) => True\nGoodDinner(5, True) => False\n```\n</problem>\n<bug_code>\n1. def GoodDinner(pizzas, weekend):\n2.        if(pizzas >= 10 and weekend):\n3.                return True\n4.        elif(pizzas <= 20 and not(weekend)):\n5.                return True\n6.        return False\n</bug_code>\n<dialogue>\nTeacher: And would you use `and`, `or`, or `xor` to produce your desired outcome?\n</dialogue>",
            "most": "<problem>\nYou like to eat pizzas for dinner. A good dinner is a dinner where you eat between 10 and 20 pizzas (inclusive). Unless it is a weekend, in which case there is no upper bound on the number of pizzas. Write a function called `GoodDinner(pizzas_int, weekend:bool) -> bool` which takes two inputs: the number of pizzas you eat, and a boolean which is true if it is the weekend and false otherwise. Your function should return true if you had a good dinner, and false if you didn't.\n## Example Cases:\n```\nGoodDinner(10, False) => True\nGoodDinner(20, False) => True\nGoodDinner(5, False) => False\nGoodDinner(21, False) => False\nGoodDinner(10, True) => True\nGoodDinner(21, True) => True\nGoodDinner(5, True) => False\n```\n</problem>\n<bug_code>\n1. def GoodDinner(pizzas, weekend):\n2.        if(pizzas >= 10 and weekend):\n3.                return True\n4.        elif(pizzas <= 20 and not(weekend)):\n5.                return True\n6.        return False\n</bug_code>\n<dialogue>\nTeacher: Could the problem be with your condition `pizzas <= 20 and not(weekend)`? Shouldn't it also check if `pizzas` is greater than or equal to 10?\n</dialogue>"
        },
        "64_65_count_ones": {
            "solution": "On line 3, the loop iterates `integers - 1` times instead of `integers` times. Consequently, the function does not access all elements in the `integers` list and always skips the first element in `integers`.Replace `1` with `0` in the `range` call on line 3.",
            "least": "<problem>\nWrite a function called `CountOnes(integers:list) -> int` which is passed one input a list of integers. This function should count how many elements in the array are equal to 1, and it should return this number.\n## Example Cases:\n```\nCountOnes([1,1,1,0,0]) => 3\nCountOnes([1,0,0]) => 1\nCountOnes([]) => 0\nCountOnes([3]) => 0\n```\n</problem>\n<bug_code>\n1. def CountOnes(integers):\n2.\tcount = 0\n3.\tfor i in range(1, len(integers)):\n4.\t\tif(integers[i] == 1):\n5.\t\t\tcount++\n6.\treturn count\n</bug_code>\n<dialogue>\nTeacher: Can you tell me how many elements are in `range(1, len(integers))`?\n</dialogue>",
            "more": "<problem>\nWrite a function called `CountOnes(integers:list) -> int` which is passed one input a list of integers. This function should count how many elements in the array are equal to 1, and it should return this number.\n## Example Cases:\n```\nCountOnes([1,1,1,0,0]) => 3\nCountOnes([1,0,0]) => 1\nCountOnes([]) => 0\nCountOnes([3]) => 0\n```\n</problem>\n<bug_code>\n1. def CountOnes(integers):\n2.\tcount = 0\n3.\tfor i in range(1, len(integers)):\n4.\t\tif(integers[i] == 1):\n5.\t\t\tcount++\n6.\treturn count\n</bug_code>\n<dialogue>\nTeacher: At what index do Python lists begin?\n</dialogue>",
            "most": "<problem>\nWrite a function called `CountOnes(integers:list) -> int` which is passed one input a list of integers. This function should count how many elements in the array are equal to 1, and it should return this number.\n## Example Cases:\n```\nCountOnes([1,1,1,0,0]) => 3\nCountOnes([1,0,0]) => 1\nCountOnes([]) => 0\nCountOnes([3]) => 0\n```\n</problem>\n<bug_code>\n1. def CountOnes(integers):\n2.\tcount = 0\n3.\tfor i in range(1, len(integers)):\n4.\t\tif(integers[i] == 1):\n5.\t\t\tcount++\n6.\treturn count\n</bug_code>\n<dialogue>\nTeacher: How can you adjust the range of your loop to include the first element of the list?\n</dialogue>"
        },
        "65_66_list_range": {
            "solution": "On lines 2 and 3, `smallest` and `largest` are initialized to 0 if the largest element in the array is a negative number `largest` will remain 0 and consequently the range will be computed incorrectly.Initialize `smallest` and `largest` to the first element of array `array[0]`.",
            "least": "<problem>\nWrite a function called `Range(array:list) -> int` which is passed one input, a list of integers. This function should return the difference between the largest value in the array and the smallest value in the array.\n## Example Cases:\n```\nRange([1,2]) => 1\nRange([1,1,1,1,1,1,5])  => 4\nRange([2,2,1,3])  => 2\nRange([-10,-3,-1])  => 9\nRange([-10,3,1])  => 13\n```\n</problem>\n<bug_code>\n1. def Range(array):\n2.        smallest = 0\n3.        largest = 0\n4.        for element in array:\n5.                if(element > largest):\n6.                        largest = element\n7.                if(element < smallest):\n8.                        smallest = element\n9.        return largest - smallest\n</bug_code>\n<dialogue>\nTeacher: Would you be able to guarantee that the list you are given is only of values that are within the arbitrary constraints you set? There is a better way to ensure that the values of `largest` and `smallest` are always within the list.\n</dialogue>",
            "more": "<problem>\nWrite a function called `Range(array:list) -> int` which is passed one input, a list of integers. This function should return the difference between the largest value in the array and the smallest value in the array.\n## Example Cases:\n```\nRange([1,2]) => 1\nRange([1,1,1,1,1,1,5])  => 4\nRange([2,2,1,3])  => 2\nRange([-10,-3,-1])  => 9\nRange([-10,3,1])  => 13\n```\n</problem>\n<bug_code>\n1. def Range(array):\n2.        smallest = 0\n3.        largest = 0\n4.        for element in array:\n5.                if(element > largest):\n6.                        largest = element\n7.                if(element < smallest):\n8.                        smallest = element\n9.        return largest - smallest\n</bug_code>\n<dialogue>\nTeacher: Let's say you picked -1000 for your initial value of `largest`, can you think of a list where your initial value is larger than every element of the list?\n</dialogue>",
            "most": "<problem>\nWrite a function called `Range(array:list) -> int` which is passed one input, a list of integers. This function should return the difference between the largest value in the array and the smallest value in the array.\n## Example Cases:\n```\nRange([1,2]) => 1\nRange([1,1,1,1,1,1,5])  => 4\nRange([2,2,1,3])  => 2\nRange([-10,-3,-1])  => 9\nRange([-10,3,1])  => 13\n```\n</problem>\n<bug_code>\n1. def Range(array):\n2.        smallest = 0\n3.        largest = 0\n4.        for element in array:\n5.                if(element > largest):\n6.                        largest = element\n7.                if(element < smallest):\n8.                        smallest = element\n9.        return largest - smallest\n</bug_code>\n<dialogue>\nTeacher: What if you initialize smallest and largest to the first element of the array?\n</dialogue>"
        },
        "66_67_last_index_of": {
            "solution": "The function returns 0 when `value` is not in `array` instead of returning -1.Initialize `index` to -1 on line 2.",
            "least": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.\tindex = 0\n3.\tfor i in range(0, len(array)):\n4.\t\tif(value == array[i]):\n5.\t\t\tindex = i\n6.\treturn index\n</bug_code>\n<dialogue>\nTeacher: And what would distinguish that action from the function finding a match at index 0?\n</dialogue>",
            "more": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.\tindex = 0\n3.\tfor i in range(0, len(array)):\n4.\t\tif(value == array[i]):\n5.\t\t\tindex = i\n6.\treturn index\n</bug_code>\n<dialogue>\nTeacher: Can you explain the difference between that and if the first element is the last index of the value?\n</dialogue>",
            "most": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.\tindex = 0\n3.\tfor i in range(0, len(array)):\n4.\t\tif(value == array[i]):\n5.\t\t\tindex = i\n6.\treturn index\n</bug_code>\n<dialogue>\nTeacher: What should you initialize `index` to in order to return -1 when the value is not in the array?\n</dialogue>"
        },
        "66_68_last_index_of": {
            "solution": "On line 3, the loop iterates `array - 1` times instead of `array` times. Consequently, the function does not access all elements in the `array` list and always skips the first element in the `array`.Replace `1` with `0` in the `range` call on line 3.",
            "least": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.\tindex = -1\n3.\tfor i in range(1, len(array)):\n4.\t\tif(value == array[i]):\n5.\t\t\tindex = i\n6.\treturn index\n</bug_code>\n<dialogue>\nTeacher: Does everything look correct in the values for the loop?\n</dialogue>",
            "more": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.\tindex = -1\n3.\tfor i in range(1, len(array)):\n4.\t\tif(value == array[i]):\n5.\t\t\tindex = i\n6.\treturn index\n</bug_code>\n<dialogue>\nTeacher: What is the index of the first place in the array that we should check?\n</dialogue>",
            "most": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.\tindex = -1\n3.\tfor i in range(1, len(array)):\n4.\t\tif(value == array[i]):\n5.\t\t\tindex = i\n6.\treturn index\n</bug_code>\n<dialogue>\nTeacher: Did you notice that your loop is not starting from the first element of the list?\n</dialogue>"
        },
        "66_69_last_index_of": {
            "solution": "On line 3, the range is from `len(array)-1` to `-1`. The `range` function does not iterate when the start is greater than the stop. Consequently, the for loop is not executed and the function always returns -1.Change the `range` function on line 3 to `range(len(array)-1, -1, -1)` to iterate backwards from `len(array)-1 to -1`.",
            "least": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.    index = -1\n3.    for i in range(len(array)-1, -1):\n4.        if(array[i] == value):\n5.            index = i\n6.            break\n7.    return index\n</bug_code>\n<dialogue>\nTeacher: Let's examine that loop carefully. What variable controls the loop?\n</dialogue>",
            "more": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.    index = -1\n3.    for i in range(len(array)-1, -1):\n4.        if(array[i] == value):\n5.            index = i\n6.            break\n7.    return index\n</bug_code>\n<dialogue>\nTeacher: Let's check that loop carefully, how should we move through the list?\n</dialogue>",
            "most": "<problem>\nWrite a function called `LastIndexOf(value:int, array:list) -> int` which is passed two inputs: a value to search for, and a list of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.\n## Example Cases:\n```\nLastIndexOf(1, [1,1,1,1]) => 3\nLastIndexOf(2, [2,0,1,2])  => 3\nLastIndexOf(3, [1,1,1,1]) => -1\nLastIndexOf(4, [4,1,1,1]) => 0\n```\n</problem>\n<bug_code>\n1. def LastIndexOf(value, array):\n2.    index = -1\n3.    for i in range(len(array)-1, -1):\n4.        if(array[i] == value):\n5.            index = i\n6.            break\n7.    return index\n</bug_code>\n<dialogue>\nTeacher: How about changing the range in your for loop to iterate backwards?\n</dialogue>"
        },
        "67_70_area_circle": {
            "solution": "On line 3, the function raises the radius to the power of the radius instead of squaring it. As a result, the function does not compute the circle area correctly.Change the return statement on line 4 to `math.pi * radius * radius`Change the return statement on line 4 to `math.pi * radius **2`",
            "least": "<problem>\nWrite a function that computes the area of a circle. You will name your function `area_circle(radius: float) -> float`. It has one parameter, the radius of the circle, radius. `The area_circle` function will return the area of the circle.\n## Example Cases:\n```\narea_circle(1.0) => 3.141\narea_circle(2.5) => 19.634\narea_circle(3.6) => 40.715\narea_circle(4.1) => 52.810\narea_circle(7.0) => 153.938\narea_circle(-2.0) => 0\n```\n</problem>\n<bug_code>\n1. import math\n2.def area_circle(radius):\n3.    if radius < 0:\n4.        return 0\n5.    return math.pi * radius ** radius\n</bug_code>\n<dialogue>\nTeacher: Look carefully at that line, can you tell me exactly what the code there does?\n</dialogue>",
            "more": "<problem>\nWrite a function that computes the area of a circle. You will name your function `area_circle(radius: float) -> float`. It has one parameter, the radius of the circle, radius. `The area_circle` function will return the area of the circle.\n## Example Cases:\n```\narea_circle(1.0) => 3.141\narea_circle(2.5) => 19.634\narea_circle(3.6) => 40.715\narea_circle(4.1) => 52.810\narea_circle(7.0) => 153.938\narea_circle(-2.0) => 0\n```\n</problem>\n<bug_code>\n1. import math\n2.def area_circle(radius):\n3.    if radius < 0:\n4.        return 0\n5.    return math.pi * radius ** radius\n</bug_code>\n<dialogue>\nTeacher: What is the python operator for raising one value to the power of another?\n</dialogue>",
            "most": "<problem>\nWrite a function that computes the area of a circle. You will name your function `area_circle(radius: float) -> float`. It has one parameter, the radius of the circle, radius. `The area_circle` function will return the area of the circle.\n## Example Cases:\n```\narea_circle(1.0) => 3.141\narea_circle(2.5) => 19.634\narea_circle(3.6) => 40.715\narea_circle(4.1) => 52.810\narea_circle(7.0) => 153.938\narea_circle(-2.0) => 0\n```\n</problem>\n<bug_code>\n1. import math\n2.def area_circle(radius):\n3.    if radius < 0:\n4.        return 0\n5.    return math.pi * radius ** radius\n</bug_code>\n<dialogue>\nTeacher: Shouldn't the radius be squared in the formula to calculate the area of a circle?\n</dialogue>"
        },
        "69_81_get_combinations": {
            "solution": "On line 4, the second for loop starts at `i` rather than at `0`, so it is missing combinations of the i-th character with characters that precede it. On line 4, change the for loop to `for j in range(len(list_c))`.",
            "least": "<problem>\nWrite a Python function called `get_combinations(my_list: list(str)) -> list(str)` that takes a list of distinct characters as a parameter, and returns a list containing all of the 2-letter combinations of said characters. The ordering of the elements in the list does not matter, so long as all of the 2-letter combinations are contained within the list.\n## Example Cases:\n```\nget_combinations(['a', 'b']) => ['aa', 'ba', 'ab', 'bb']\nget_combinations(['a', 'b', 'c']) => ['aa', 'ba', 'ca', 'ab', 'bb', 'cb', 'ac', 'bc', 'cc']\nget_combinations(['ta', 'er', 'c']) => ['tata', 'erta', 'cta', 'taer', 'erer', 'cer', 'tac', 'erc', 'cc']\n```\n</problem>\n<bug_code>\n1. def get_combinations(list_c):\n2.    ans=[]\n3.    for i in range(0,len(list_c)):\n4.        for j in range(i,len(list_c)):\n5.            ans.append(list_c[j]+list_c[i])\n6.    return ans\n</bug_code>\n<dialogue>\nTeacher: What value does i start on, and what value does it stop on?\n</dialogue>",
            "more": "<problem>\nWrite a Python function called `get_combinations(my_list: list(str)) -> list(str)` that takes a list of distinct characters as a parameter, and returns a list containing all of the 2-letter combinations of said characters. The ordering of the elements in the list does not matter, so long as all of the 2-letter combinations are contained within the list.\n## Example Cases:\n```\nget_combinations(['a', 'b']) => ['aa', 'ba', 'ab', 'bb']\nget_combinations(['a', 'b', 'c']) => ['aa', 'ba', 'ca', 'ab', 'bb', 'cb', 'ac', 'bc', 'cc']\nget_combinations(['ta', 'er', 'c']) => ['tata', 'erta', 'cta', 'taer', 'erer', 'cer', 'tac', 'erc', 'cc']\n```\n</problem>\n<bug_code>\n1. def get_combinations(list_c):\n2.    ans=[]\n3.    for i in range(0,len(list_c)):\n4.        for j in range(i,len(list_c)):\n5.            ans.append(list_c[j]+list_c[i])\n6.    return ans\n</bug_code>\n<dialogue>\nTeacher: How many times does it iterate?\n</dialogue>",
            "most": "<problem>\nWrite a Python function called `get_combinations(my_list: list(str)) -> list(str)` that takes a list of distinct characters as a parameter, and returns a list containing all of the 2-letter combinations of said characters. The ordering of the elements in the list does not matter, so long as all of the 2-letter combinations are contained within the list.\n## Example Cases:\n```\nget_combinations(['a', 'b']) => ['aa', 'ba', 'ab', 'bb']\nget_combinations(['a', 'b', 'c']) => ['aa', 'ba', 'ca', 'ab', 'bb', 'cb', 'ac', 'bc', 'cc']\nget_combinations(['ta', 'er', 'c']) => ['tata', 'erta', 'cta', 'taer', 'erer', 'cer', 'tac', 'erc', 'cc']\n```\n</problem>\n<bug_code>\n1. def get_combinations(list_c):\n2.    ans=[]\n3.    for i in range(0,len(list_c)):\n4.        for j in range(i,len(list_c)):\n5.            ans.append(list_c[j]+list_c[i])\n6.    return ans\n</bug_code>\n<dialogue>\nTeacher: Have you noticed that your second loop starts at i instead of 0?\n</dialogue>"
        },
        "6_33_turning_clockwise": {
            "solution": "The function prints the strings \"N\", \"E\", \"S\", \"W\", and \"None\". Consequently, the function returns `None` for all cases of `compass_point` instead of returning the appropriate strings.Replace all the print statements `print (\"E\")`, `print (\"S\")`, `print (\"W\")`, `print (\"N\")`, `print(\"None\")` with the return statements `return \"E\"`, `return \"S\"`, `return \"W\"`, `return \"N\"`, `return \"None\"` on lines 3, 5, 7, 9, and 11 respectively.",
            "least": "<problem>\nThe four compass points can be abbreviated by single-letter strings as \u201cN\u201d, \u201cE\u201d, \u201cS\u201d, and \u201cW\u201d. Write a function `turn_clockwise (compass_point:str)` that takes one of these four compass points as its parameter, and returns the next compass point in the clockwise direction. If `compass_point` has another value that's distinct from the four compass points listed earlier, return the value `None`.\n## Example Cases:\n```\nturn_clockwise(\"N\") => \"E\"\nturn_clockwise(\"W\") => \"N\"\nturn_clockwise(\"S\") => \"W\"\nturn_clockwise(\"E\") => \"S\"\nturn_clockwise(42) => None\nturn_clockwise(\"rubbish\") => None\n```\n</problem>\n<bug_code>\n1. def turn_clockwise(compass_point):\n2.    if compass_point == \"N\":\n3.        print (\"E\")\n4.    elif compass_point == \"E\":\n5.        print (\"S\")\n6.    elif compass_point == \"S\":\n7.        print (\"W\")\n8.    elif compass_point == \"W\":\n9.        print (\"N\")\n10.    else:\n11.        print (\"None\")\n</bug_code>\n<dialogue>\nTeacher: Hi! Let's take a look at your code. Could you explain how your code works?\n</dialogue>",
            "more": "<problem>\nThe four compass points can be abbreviated by single-letter strings as \u201cN\u201d, \u201cE\u201d, \u201cS\u201d, and \u201cW\u201d. Write a function `turn_clockwise (compass_point:str)` that takes one of these four compass points as its parameter, and returns the next compass point in the clockwise direction. If `compass_point` has another value that's distinct from the four compass points listed earlier, return the value `None`.\n## Example Cases:\n```\nturn_clockwise(\"N\") => \"E\"\nturn_clockwise(\"W\") => \"N\"\nturn_clockwise(\"S\") => \"W\"\nturn_clockwise(\"E\") => \"S\"\nturn_clockwise(42) => None\nturn_clockwise(\"rubbish\") => None\n```\n</problem>\n<bug_code>\n1. def turn_clockwise(compass_point):\n2.    if compass_point == \"N\":\n3.        print (\"E\")\n4.    elif compass_point == \"E\":\n5.        print (\"S\")\n6.    elif compass_point == \"S\":\n7.        print (\"W\")\n8.    elif compass_point == \"W\":\n9.        print (\"N\")\n10.    else:\n11.        print (\"None\")\n</bug_code>\n<dialogue>\nTeacher: I see. Suppose we run your code with the function call `store = turn_clockwise(\"N\")`. What do you think the value of `store` will be after execution?\n</dialogue>",
            "most": "<problem>\nThe four compass points can be abbreviated by single-letter strings as \u201cN\u201d, \u201cE\u201d, \u201cS\u201d, and \u201cW\u201d. Write a function `turn_clockwise (compass_point:str)` that takes one of these four compass points as its parameter, and returns the next compass point in the clockwise direction. If `compass_point` has another value that's distinct from the four compass points listed earlier, return the value `None`.\n## Example Cases:\n```\nturn_clockwise(\"N\") => \"E\"\nturn_clockwise(\"W\") => \"N\"\nturn_clockwise(\"S\") => \"W\"\nturn_clockwise(\"E\") => \"S\"\nturn_clockwise(42) => None\nturn_clockwise(\"rubbish\") => None\n```\n</problem>\n<bug_code>\n1. def turn_clockwise(compass_point):\n2.    if compass_point == \"N\":\n3.        print (\"E\")\n4.    elif compass_point == \"E\":\n5.        print (\"S\")\n6.    elif compass_point == \"S\":\n7.        print (\"W\")\n8.    elif compass_point == \"W\":\n9.        print (\"N\")\n10.    else:\n11.        print (\"None\")\n</bug_code>\n<dialogue>\nTeacher: Do you recall, which reserved word in Python is used to return the output for a function back to a variable?\n</dialogue>"
        },
        "6_34_turning_clockwise": {
            "solution": "There are syntax errors on lines 2, 4, 6, and 8.Replace `=` with `==` on lines 2, 4, 6, and 8.",
            "least": "<problem>\nThe four compass points can be abbreviated by single-letter strings as \u201cN\u201d, \u201cE\u201d, \u201cS\u201d, and \u201cW\u201d. Write a function `turn_clockwise (compass_point:str)` that takes one of these four compass points as its parameter, and returns the next compass point in the clockwise direction. If `compass_point` has another value that's distinct from the four compass points listed earlier, return the value None.\n## Example Cases:\n```\nturn_clockwise(\"N\") => \"E\"\nturn_clockwise(\"W\") => \"N\"\nturn_clockwise(\"S\") => \"W\"\nturn_clockwise(\"E\") => \"S\"\nturn_clockwise(42) => None\nturn_clockwise(\"rubbish\") => None\n```\n</problem>\n<bug_code>\n1. def turn_clockwise(compass_point):\n2.    if compass_point = \"N\":\n3.        return \"E\"\n4.    elif compass_point = \"E\":\n5.        return \"S\"\n6.    elif compass_point = \"S\":\n7.        return \"W\"\n8.    elif compass_point = \"W\":\n9.        return \"N\"\n10.    else:\n11.        return None\n</bug_code>\n<dialogue>\nTeacher: Can you describe what you are trying to do on line 2?\n</dialogue>",
            "more": "<problem>\nThe four compass points can be abbreviated by single-letter strings as \u201cN\u201d, \u201cE\u201d, \u201cS\u201d, and \u201cW\u201d. Write a function `turn_clockwise (compass_point:str)` that takes one of these four compass points as its parameter, and returns the next compass point in the clockwise direction. If `compass_point` has another value that's distinct from the four compass points listed earlier, return the value None.\n## Example Cases:\n```\nturn_clockwise(\"N\") => \"E\"\nturn_clockwise(\"W\") => \"N\"\nturn_clockwise(\"S\") => \"W\"\nturn_clockwise(\"E\") => \"S\"\nturn_clockwise(42) => None\nturn_clockwise(\"rubbish\") => None\n```\n</problem>\n<bug_code>\n1. def turn_clockwise(compass_point):\n2.    if compass_point = \"N\":\n3.        return \"E\"\n4.    elif compass_point = \"E\":\n5.        return \"S\"\n6.    elif compass_point = \"S\":\n7.        return \"W\"\n8.    elif compass_point = \"W\":\n9.        return \"N\"\n10.    else:\n11.        return None\n</bug_code>\n<dialogue>\nTeacher: Ah. Can you show me how you would assign the value \"N\" to a variable `compass_point`?\n</dialogue>",
            "most": "<problem>\nThe four compass points can be abbreviated by single-letter strings as \u201cN\u201d, \u201cE\u201d, \u201cS\u201d, and \u201cW\u201d. Write a function `turn_clockwise (compass_point:str)` that takes one of these four compass points as its parameter, and returns the next compass point in the clockwise direction. If `compass_point` has another value that's distinct from the four compass points listed earlier, return the value None.\n## Example Cases:\n```\nturn_clockwise(\"N\") => \"E\"\nturn_clockwise(\"W\") => \"N\"\nturn_clockwise(\"S\") => \"W\"\nturn_clockwise(\"E\") => \"S\"\nturn_clockwise(42) => None\nturn_clockwise(\"rubbish\") => None\n```\n</problem>\n<bug_code>\n1. def turn_clockwise(compass_point):\n2.    if compass_point = \"N\":\n3.        return \"E\"\n4.    elif compass_point = \"E\":\n5.        return \"S\"\n6.    elif compass_point = \"S\":\n7.        return \"W\"\n8.    elif compass_point = \"W\":\n9.        return \"N\"\n10.    else:\n11.        return None\n</bug_code>\n<dialogue>\nTeacher: Are you sure that you can use the same operator `=` for assignment and to check for equality?\n</dialogue>"
        },
        "74_77_disney_vacation_club": {
            "solution": "On line 8, the new total fee is calculated before the number of years is incremented, so the final result will be 1 greater than the correct answer.Move line 9 to be above line 8 and within the while loop.",
            "least": "\n<problem>\nThe CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual \"maintenance fee\" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).\n\nThis year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%.\n\nWrite a Python function called `get_years_until(target_value: float) -> int` that takes a target value as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.\n\n## Example Cases:\n```\nget_years_until(624) => 1\nget_years_until(1000) => 32\n```\n\n</problem>\n<bug_code>\n1. def get_years_until(target_amount):\n2.    i=623\n3.    years=0\n4.    while i < target_amount:\n5.        years= years+1\n6.        i= 0.015*i\n7.    return years\n</bug_code>\n<dialogue>\nTeacher: That makes sense, let's look at the calculation part inside the loop. How do we calculate the interest amount?\n</dialogue>",
            "more": "\n<problem>\nThe CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual \"maintenance fee\" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).\n\nThis year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%.\n\nWrite a Python function called `get_years_until(target_value: float) -> int` that takes a target value as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.\n\n## Example Cases:\n```\nget_years_until(624) => 1\nget_years_until(1000) => 32\n```\n\n</problem>\n<bug_code>\n1. def get_years_until(target_amount):\n2.    i=623\n3.    years=0\n4.    while i < target_amount:\n5.        years= years+1\n6.        i= 0.015*i\n7.    return years\n</bug_code>\n<dialogue>\nTeacher: Why can \"i\" never reach the target amount?\n</dialogue>",
            "most": "\n<problem>\nThe CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual \"maintenance fee\" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).\n\nThis year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%.\n\nWrite a Python function called `get_years_until(target_value: float) -> int` that takes a target value as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.\n\n## Example Cases:\n```\nget_years_until(624) => 1\nget_years_until(1000) => 32\n```\n\n</problem>\n<bug_code>\n1. def get_years_until(target_amount):\n2.    i=623\n3.    years=0\n4.    while i < target_amount:\n5.        years= years+1\n6.        i= 0.015*i\n7.    return years\n</bug_code>\n<dialogue>\nTeacher: Are you sure you are calculating the new fee correctly on line 6?\n</dialogue>"
        },
        "74_78_disney_vacation_club": {
            "solution": "On line 8, the new total fee is calculated before the number of years is incremented, so the final result will be 1 greater than the correct answer.Move line 9 to be above line 8 and within the while loop.",
            "least": "\n<problem>\nThe CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual \"maintenance fee\" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).\nThis year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%Write a Python function called `get_years_until(target_value: float) -> int` that takes a target value as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.\n## Example Cases:\n```\nget_years_until(624) => 1\nget_years_until(1000) => 32\n```\n</problem>\n<bug_code>\n1. def get_years_until(target_amount):\n2.\n3.    current_fee = 623.00\n4.    years = 0\n5.    total_fee = current_fee\n6.\n7.    while total_fee < target_amount:\n8.        total_fee = current_fee*(1.015**years)\n9.        years += 1\n10.\n11.    return years\n</bug_code>\n<dialogue>\nTeacher: So what happens on line 7?\n</dialogue>",
            "more": "\n<problem>\nThe CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual \"maintenance fee\" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).\nThis year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%Write a Python function called `get_years_until(target_value: float) -> int` that takes a target value as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.\n## Example Cases:\n```\nget_years_until(624) => 1\nget_years_until(1000) => 32\n```\n</problem>\n<bug_code>\n1. def get_years_until(target_amount):\n2.\n3.    current_fee = 623.00\n4.    years = 0\n5.    total_fee = current_fee\n6.\n7.    while total_fee < target_amount:\n8.        total_fee = current_fee*(1.015**years)\n9.        years += 1\n10.\n11.    return years\n</bug_code>\n<dialogue>\nTeacher: What is the purpose of line 9?\n</dialogue>",
            "most": "\n<problem>\nThe CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual \"maintenance fee\" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).\nThis year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%Write a Python function called `get_years_until(target_value: float) -> int` that takes a target value as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.\n## Example Cases:\n```\nget_years_until(624) => 1\nget_years_until(1000) => 32\n```\n</problem>\n<bug_code>\n1. def get_years_until(target_amount):\n2.\n3.    current_fee = 623.00\n4.    years = 0\n5.    total_fee = current_fee\n6.\n7.    while total_fee < target_amount:\n8.        total_fee = current_fee*(1.015**years)\n9.        years += 1\n10.\n11.    return years\n</bug_code>\n<dialogue>\nTeacher: Are you updating the number of years before or after calculating the total fee?\n</dialogue>"
        },
        "7_35_integer_grouping": {
            "solution": "The function assigns a list of one element to each key in the dictionary `result` on line 4. Consequently, each list in the dictionary contains exactly one element instead of all the second elements of the tuples in `valList` that have the same first element as the key.  Replace line 4 with the following lines:```pyif key in result.keys():      result[key].append(value)else:      result[key] = [value]```Replace line 4 with: `result[key] = [value] if key not in result else result[key] + [value]`",
            "least": "<problem>\nImplement a function `my_func(valList:List[Tuple[int,int]])->Dict[int,List[int]]` where\n`valList` is a list of `n` tuples where each tuple contains two integers `a,b` `(1<=a,b)`.\nReturn a dictionary where the:\n* key: first elements of `valList`\n* value: list containing all the second elements of the tuples in `valList` that have the same first element as the key.\n```py\nmy_func([(6, 5),(2, 7),(2, 5),(8, 7),(8, 9),(2, 7)]) => {6: [5], 2: [7, 5, 7], 8: [7, 9]}\n```\nIn the example above:\n* Tuples with 6 as the first element are `(6, 5)` so the value for key 6 is `[5]`\n* Tuples with 2 as the first element are `(2, 7)`, `(2, 5)`, and `(2, 7)` so the value for key 2 is `[7, 5, 7]`\n* Tuples with 8 as the first element are `(8, 7)` and `(8, 9)` so the value for key 8 is `[7, 9]`\n## Example Cases:\n```\nmy_func([(1, 1),(2, 2),(3, 3)]) => {1: [1], 2: [2], 3: [3]}\nmy_func([(6, 5),(2, 7),(2, 5),(8, 7),(8, 9),(2, 7)]) => {6: [5], 2: [7, 5, 7], 8: [7, 9]}\nmy_func([(-78, 13),(-9, 2),(10, 2), (-78, 45), (-9, 2), (10, -78), (-9, 22)]) => {-78: [13, 45], -9: [2, 2, 22], 10: [2, -78]}\n```\n</problem>\n<bug_code>\n1. def my_func(valList):\n2.    result = {}\n3.    for key, value in valList:\n4.         result[key] = [value]\n5.    return result\n</bug_code>\n<dialogue>\nTeacher: Can you read in the Python documentation the section on the `dict` built-in type and see when `KeyError` is raised? Here is the link: https://docs.python.org/3/library/stdtypes.html#dict\n</dialogue>",
            "more": "<problem>\nImplement a function `my_func(valList:List[Tuple[int,int]])->Dict[int,List[int]]` where\n`valList` is a list of `n` tuples where each tuple contains two integers `a,b` `(1<=a,b)`.\nReturn a dictionary where the:\n* key: first elements of `valList`\n* value: list containing all the second elements of the tuples in `valList` that have the same first element as the key.\n```py\nmy_func([(6, 5),(2, 7),(2, 5),(8, 7),(8, 9),(2, 7)]) => {6: [5], 2: [7, 5, 7], 8: [7, 9]}\n```\nIn the example above:\n* Tuples with 6 as the first element are `(6, 5)` so the value for key 6 is `[5]`\n* Tuples with 2 as the first element are `(2, 7)`, `(2, 5)`, and `(2, 7)` so the value for key 2 is `[7, 5, 7]`\n* Tuples with 8 as the first element are `(8, 7)` and `(8, 9)` so the value for key 8 is `[7, 9]`\n## Example Cases:\n```\nmy_func([(1, 1),(2, 2),(3, 3)]) => {1: [1], 2: [2], 3: [3]}\nmy_func([(6, 5),(2, 7),(2, 5),(8, 7),(8, 9),(2, 7)]) => {6: [5], 2: [7, 5, 7], 8: [7, 9]}\nmy_func([(-78, 13),(-9, 2),(10, 2), (-78, 45), (-9, 2), (10, -78), (-9, 22)]) => {-78: [13, 45], -9: [2, 2, 22], 10: [2, -78]}\n```\n</problem>\n<bug_code>\n1. def my_func(valList):\n2.    result = {}\n3.    for key, value in valList:\n4.         result[key] = [value]\n5.    return result\n</bug_code>\n<dialogue>\nTeacher: Do you know what happens when you try to get a value using a key that does not exist in the dictionary?\n</dialogue>",
            "most": "<problem>\nImplement a function `my_func(valList:List[Tuple[int,int]])->Dict[int,List[int]]` where\n`valList` is a list of `n` tuples where each tuple contains two integers `a,b` `(1<=a,b)`.\nReturn a dictionary where the:\n* key: first elements of `valList`\n* value: list containing all the second elements of the tuples in `valList` that have the same first element as the key.\n```py\nmy_func([(6, 5),(2, 7),(2, 5),(8, 7),(8, 9),(2, 7)]) => {6: [5], 2: [7, 5, 7], 8: [7, 9]}\n```\nIn the example above:\n* Tuples with 6 as the first element are `(6, 5)` so the value for key 6 is `[5]`\n* Tuples with 2 as the first element are `(2, 7)`, `(2, 5)`, and `(2, 7)` so the value for key 2 is `[7, 5, 7]`\n* Tuples with 8 as the first element are `(8, 7)` and `(8, 9)` so the value for key 8 is `[7, 9]`\n## Example Cases:\n```\nmy_func([(1, 1),(2, 2),(3, 3)]) => {1: [1], 2: [2], 3: [3]}\nmy_func([(6, 5),(2, 7),(2, 5),(8, 7),(8, 9),(2, 7)]) => {6: [5], 2: [7, 5, 7], 8: [7, 9]}\nmy_func([(-78, 13),(-9, 2),(10, 2), (-78, 45), (-9, 2), (10, -78), (-9, 22)]) => {-78: [13, 45], -9: [2, 2, 22], 10: [2, -78]}\n```\n</problem>\n<bug_code>\n1. def my_func(valList):\n2.    result = {}\n3.    for key, value in valList:\n4.         result[key] = [value]\n5.    return result\n</bug_code>\n<dialogue>\nTeacher: Do you know what happens when you try to get a value using a key that does not exist in the dictionary?\n</dialogue>"
        },
        "9_38_calculating_determinant": {
            "solution": "On line 7, `subm2` is created as a one dimensional array. However, when line 10 evaluates `det2d(subm2)`, it assumes that it is a two dimensional array, which raises a TypeError exception.Change line 7 to `subm2 = [[matrix[1][0], matrix[1][2]], [matrix[2][0], matrix[2][2]]]` and change line 8 with `subm3 = [[matrix[1][0], matrix[1][1]], [matrix[2][0], matrix[2][1]]]`.",
            "least": "<problem>\nWrite a function `determinant(matrix:List[List [int]]) -> List[List[int]]` that calculates the determinant of a 3x3 matrix.\n## Example Cases:\n```\ndeterminant([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => 0\ndeterminant([[4, -7, 9], [6, 0, 3], [-1, 7, 0]]) => 315\ndeterminant([[-6, 0, 5], [-8, -8, -5], [-10, 2, 8]]) => -156\ndeterminant([[2, -1, -8], [5,-1,-3], [-1,-9, 6]]) => 329\n```\n</problem>\n<bug_code>\n1. def det2d(matrix):\n2.    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n3.\n4. def determinant(matrix):\n5.\n6.    subm1 = [val[1:3] for val in matrix[1:3]]\n7.    subm2 = [matrix[1][0], matrix[1][2], matrix[2][0], matrix[2][2]]\n8.    subm3 = [matrix[1][0], matrix[1][1]], [matrix[2][0], matrix[2][1]]\n9.\n10.    return matrix[0][0] * det2d(subm1) - matrix[0][1] * det2d(subm2) + matrix[0][2] * det2d(subm3)\n</bug_code>\n<dialogue>\nTeacher: What are the intended inputs and outputs of the `det2d` function?\n</dialogue>",
            "more": "<problem>\nWrite a function `determinant(matrix:List[List [int]]) -> List[List[int]]` that calculates the determinant of a 3x3 matrix.\n## Example Cases:\n```\ndeterminant([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => 0\ndeterminant([[4, -7, 9], [6, 0, 3], [-1, 7, 0]]) => 315\ndeterminant([[-6, 0, 5], [-8, -8, -5], [-10, 2, 8]]) => -156\ndeterminant([[2, -1, -8], [5,-1,-3], [-1,-9, 6]]) => 329\n```\n</problem>\n<bug_code>\n1. def det2d(matrix):\n2.    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n3.\n4. def determinant(matrix):\n5.\n6.    subm1 = [val[1:3] for val in matrix[1:3]]\n7.    subm2 = [matrix[1][0], matrix[1][2], matrix[2][0], matrix[2][2]]\n8.    subm3 = [matrix[1][0], matrix[1][1]], [matrix[2][0], matrix[2][1]]\n9.\n10.    return matrix[0][0] * det2d(subm1) - matrix[0][1] * det2d(subm2) + matrix[0][2] * det2d(subm3)\n</bug_code>\n<dialogue>\nTeacher: Which variables are getting subscripted and how do you know what the data type of those variables are?\n</dialogue>",
            "most": "<problem>\nWrite a function `determinant(matrix:List[List [int]]) -> List[List[int]]` that calculates the determinant of a 3x3 matrix.\n## Example Cases:\n```\ndeterminant([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => 0\ndeterminant([[4, -7, 9], [6, 0, 3], [-1, 7, 0]]) => 315\ndeterminant([[-6, 0, 5], [-8, -8, -5], [-10, 2, 8]]) => -156\ndeterminant([[2, -1, -8], [5,-1,-3], [-1,-9, 6]]) => 329\n```\n</problem>\n<bug_code>\n1. def det2d(matrix):\n2.    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n3.\n4. def determinant(matrix):\n5.\n6.    subm1 = [val[1:3] for val in matrix[1:3]]\n7.    subm2 = [matrix[1][0], matrix[1][2], matrix[2][0], matrix[2][2]]\n8.    subm3 = [matrix[1][0], matrix[1][1]], [matrix[2][0], matrix[2][1]]\n9.\n10.    return matrix[0][0] * det2d(subm1) - matrix[0][1] * det2d(subm2) + matrix[0][2] * det2d(subm3)\n</bug_code>\n<dialogue>\nTeacher: How can you modify the definition of `subm2` and `subm3` to ensure they are two-dimensional arrays?\n</dialogue>"
        }
    }
]